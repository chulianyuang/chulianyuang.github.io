{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my world • All posts by \"数据结构与算法\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%A0%E9%A2%98%E6%B1%87%E6%80%BB/",
            "url": "http://example.com/2023/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%A0%E9%A2%98%E6%B1%87%E6%80%BB/",
            "title": "数据结构与算法习题汇总",
            "date_published": "2023-05-24T05:00:35.000Z",
            "content_html": "",
            "tags": [
                "期末复习"
            ]
        },
        {
            "id": "http://example.com/2023/05/22/%E9%98%9F%E5%88%97/",
            "url": "http://example.com/2023/05/22/%E9%98%9F%E5%88%97/",
            "title": "队列",
            "date_published": "2023-05-22T09:30:12.000Z",
            "content_html": "<h1 id=\"2-队列\"><a class=\"markdownIt-Anchor\" href=\"#2-队列\">#</a> 2、队列</h1>\n<h2 id=\"21-队列的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#21-队列的基本概念\">#</a> 2.1 队列的基本概念</h2>\n<p>队列：队列简称队，是一种操作受限的线性表，只允许在表的一端进行插入，而在表的另一端进行删除。向队列种插入元素称为入队或进队；删除元素称为出队或离队。队列的示意图如下所示：</p>\n<p>对头（front）：允许删除的一端，又称队首。<br>\n队尾（rear）：允许插入的一端。<br>\n空队列：不含任何元素的空表。<br>\n队列的特性：先进先出。<br>\n队列的应用：速度不匹配问题、多用户资源竞争问题。</p>\n<p>注意：栈和队列都是操作受限的线性表，不是任何对线性表的操作都适合栈和队列的操作，不可以随便读取栈或队列中间的某个元素。</p>\n<h2 id=\"22-队列的顺序存储结构\"><a class=\"markdownIt-Anchor\" href=\"#22-队列的顺序存储结构\">#</a> 2.2 队列的顺序存储结构</h2>\n<h3 id=\"1队列的顺序存储\"><a class=\"markdownIt-Anchor\" href=\"#1队列的顺序存储\">#</a> 1. 队列的顺序存储</h3>\n<p>队列的顺序实现是指分配一块连续的存储单元存放队列中的元素，并附设两个指针：对头指针 front 指向对头元素，队尾指针 rear 指向队尾元素的下一个位置。</p>\n<p>队列的顺序存储类型描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50  <span class=\"comment\">//定义队列中元素的最大个数</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">   ElemType data[MaxSize];  <span class=\"comment\">//存放队列元素</span></span><br><span class=\"line\">   <span class=\"type\">int</span> front,rear;  <span class=\"comment\">//队头指针和队尾指针</span></span><br><span class=\"line\">   &#125; SqQueue;</span><br></pre></td></tr></table></figure>\n<p>初始状态（队空条件）：Q.front == Q.rear == 0<br>\n 进队操作：队不满时，先送值到队尾元素，再将队尾指针加 1<br>\n 出队操作：队不空时，先取队头元素值，再将队头指针加 1</p>\n<p>队列的操作示意图如下图所示：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231746417.png\" alt=\"在这里插入图片描述\"></p>\n<p>队列操作示意图中 d 图所示，队列中仅有一个元素，再进行入队操作时，会出现 “上溢出”，但这种溢出不是真正的溢出，在队列数组中仍然存在可以存放元素的空位置，这是一种 “假溢出”。</p>\n<h3 id=\"2循环队列\"><a class=\"markdownIt-Anchor\" href=\"#2循环队列\">#</a> 2. 循环队列</h3>\n<p>循环队列：将顺序队列臆造成一个环状的空间，即把存储队列元素的表从逻辑上视为一个环，称为循环队列。</p>\n<p>当队首指针 Q.front = MaxSize-1 后，再前进一个位置就会自动到 0，可利用除法取余（%）来实现。</p>\n<p>初始时：Q.front = Q.rear = 0<br>\n 队首指针进 1：Q.front = (Q.front + 1)% MaxSize<br>\n 队尾指针进 1：Q.rear = (Q.rear + 1)% MaxSize<br>\n 队列长度：(Q.rear + MaxSize - Q.front)% MaxSize<br>\n 出队入队时：指针都按照顺时针方向进 1<br>\n<strong> 注意：不能用动态分配的一维数组来实现循环队列，初始化时必须设定一个最大队列长度。</strong></p>\n<h4 id=\"为了区分循环队列队空还是队满情况有三种处理方式其中第一种为常用的区分方式重点掌握\"><a class=\"markdownIt-Anchor\" href=\"#为了区分循环队列队空还是队满情况有三种处理方式其中第一种为常用的区分方式重点掌握\">#</a> <strong>为了区分循环队列队空还是队满情况，有三种处理方式，其中第一种为常用的区分方式，重点掌握：</strong></h4>\n<p>（1）牺牲一个单元来区分队空还是队满，入队时少用一个队列单元，约定以 “队头指针在队尾的下一个指针作为堆满标志”。如下图 (d2) 所示。</p>\n<p>队满条件： (Q.rear + 1)% MaxSize == Q.front<br>\n 队空条件：Q.front == Q.rear<br>\n 队列中元素的个数：(Q.rear + MaxSize - Q.front)% MaxSize<br>\n（2）类型中增设表示元素个数的数据成员。对空的条件为 Q.size = 0，队满的条件为 Q.size == MaxSize，有 Q.front == Q.rear。<br>\n（3）类型中增设 tag 数据成员，以区分是队空还是队满。tag = 0 时，若因删除导致 Q.front == Q.rear，则为队空；tag = 1 时，若因插入导致 Q.front == Q.rear，则为队满。</p>\n<p>循环队列出入队示意图如下所示：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231746287.png\" alt=\"在这里插入图片描述\"></p>\n<p>3 . 循环队列的操作</p>\n<p>（1）初始化</p>\n   <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue &amp;Q)</span>&#123;</span><br><span class=\"line\">   Q.front == Q.rear=<span class=\"number\">0</span>;  <span class=\"comment\">//初始化队首、队尾指针</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）判队空</p>\n<pre><code> bool isEmpty(SqQueue Q)&#123;\n    if(Q.front == Q.rear) //队空条件\n       return true;\n    else\n       return false;\n &#125;\n</code></pre>\n<p>（3）入队</p>\n<pre><code> bool EnQueue(SqQueue &amp;Q,ElemType x)&#123;\n    if( (Q.rear + 1)%MaxSize == Q.front) //队满则报错\n       return false; \n    Q.data[Q.rear]=x;\n    Q.rear= (Q.rear + 1)%MaxSize;  //队尾指针加1模\n    return true;\n &#125;   \n</code></pre>\n<p>（4）出队</p>\n<pre><code> bool DeQueue(SqQueue &amp;Q,ElemType &amp;x)&#123;\n    if(Q.front == Q.rear)  //队空则报错\n       return false;\n    x=Q.data[Q.front]; \n    Q.front = (Q.front + 1)%MaxSize;  //队头指针加1取模\n    return true;\n &#125;\n</code></pre>\n<ol start=\"4\">\n<li>顺序队列示例代码<br>\n顺序队列基本操作：顺序队列的初始化、入队列、出队列以及显示队列中的数据元素的示例代码如下所示：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QINITSIZE 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QINCRECEMENT 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> null 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> QElemType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QueueType</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    QElemType *front;</span><br><span class=\"line\">    QElemType *rear;</span><br><span class=\"line\">    <span class=\"type\">int</span> qsize;</span><br><span class=\"line\">&#125;<span class=\"built_in\">queue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">q_init</span><span class=\"params\">(<span class=\"built_in\">queue</span> *q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tq-&gt;front = (QElemType *)<span class=\"built_in\">malloc</span>(QINITSIZE*<span class=\"keyword\">sizeof</span>(QElemType));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q-&gt;front == null)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\tq-&gt;rear = q-&gt;front;</span><br><span class=\"line\">\tq-&gt;qsize = QINITSIZE;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">Enqueue</span><span class=\"params\">(<span class=\"built_in\">queue</span> *q,<span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q-&gt;rear - q-&gt;front &gt;= QINITSIZE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tq-&gt;front = (QElemType *)<span class=\"built_in\">realloc</span>(q,(q-&gt;qsize + QINCRECEMENT)*<span class=\"keyword\">sizeof</span>(QElemType));</span><br><span class=\"line\">\t\tq-&gt;rear = q-&gt;front;</span><br><span class=\"line\">\t\tq-&gt;qsize += QINCRECEMENT; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*q-&gt;rear++ = e;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">Dequeue</span><span class=\"params\">(<span class=\"built_in\">queue</span> *q,<span class=\"type\">int</span> *e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q-&gt;rear == q-&gt;front)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t*e = *q-&gt;front++;</span><br><span class=\"line\">\tq-&gt;qsize--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span> q;</span><br><span class=\"line\">\tQElemType e,*p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q_init(&amp;q))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;顺序队列创建成功!\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">1</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">2</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">3</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">4</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">5</span>);</span><br><span class=\"line\">\tp = q.front;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;顺序队列里面的数据为:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &lt; q.rear)</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,*p++);</span><br><span class=\"line\">\tDequeue(&amp;q,&amp;e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n被删除的元素:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,e);</span><br><span class=\"line\">\tp=q.front;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除队头后的数据为:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&lt;q.rear)</span><br><span class=\"line\">\t     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,*p++);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示：<img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231746520.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23-队列的链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#23-队列的链式存储结构\">#</a> 2.3 队列的链式存储结构</h2>\n<h3 id=\"1队列的链式存储\"><a class=\"markdownIt-Anchor\" href=\"#1队列的链式存储\">#</a> 1. 队列的链式存储</h3>\n<p>队列的链式表示称为链队列，实际上是一个同时带有队头指针和队尾指针的单链表。头指针指向队头结点，尾指针指向队尾结点，即单链表的最后一个结点。</p>\n<p>队列的不带头结点的链式存储示意图如下图所示：<img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231747307.png\" alt=\"在这里插入图片描述\"></p>\n<p>队列的链式存储类型代码描述如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span>  <span class=\"comment\">//链式队列结点</span></span><br><span class=\"line\">   ElemType data;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span>  <span class=\"comment\">//链式队列</span></span><br><span class=\"line\">   LinkNode *front,*rear;  <span class=\"comment\">//队列的队头和队尾指针</span></span><br><span class=\"line\">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>\n<p>当 Q.front == NULL 且 Q.rear == NULL 时，链式队列为空。</p>\n<p>出队时，首先判断队是否为空，若不空，则取出队头元素，将其从链表中移除，并让 Q.front 指向下一个结点（若该结点为最后一个结点，则令 Q.front 和 Q.rear 都为 NULL）。入队时，建立一个新结点，将新结点插入到链表的尾部，并改让 Q.rear 指向这个新插入的结点（若原队列为空队，则另 Q.front 也指向该结点）。</p>\n<p>由于不带头结点的链式队列在操作上比较麻烦，因此通常将链式队列设计成一个带头结点的单链表，实现插入和删除相统一。带头结点和不带头结点的链式队列如下图所示：</p>\n<p><strong>优点：用单链表表示的链式队列特别适合于数据元素变动比较大的情形，而且不存在队列满且产生溢出的问题。</strong></p>\n<h3 id=\"2链式队列的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#2链式队列的基本操作\">#</a> 2. 链式队列的基本操作</h3>\n<p>（1）初始化</p>\n<pre><code> void InitQueue(LinkQueue &amp;Q)&#123;\n    Q.front = Q.rear = (LinkNode *)malloc(sizeof(LinkNode));//建立头结点\n    Q.front-&gt;next =NULL; //初始为空\n</code></pre>\n<p>（2）判队空</p>\n<pre><code> bool IsEmpty(LinkQueue Q)&#123;\n    if(Q.front == Q.rear) \n       return true;\n    else\n       return false;\n &#125;\n</code></pre>\n<p>（3）入队</p>\n<pre><code> void EnQueue(LinkQueue &amp;Q，ElemTyepe x)&#123;\n    LinkNode *s=(LinkNode *)malloc(sizeof(LinkNode));\n    s-&gt;data=x; //创建新结点，插入到链尾\n    s-&gt;next=null;\n    Q.rear-&gt;next=s;\n    Q.rear=s;\n &#125;\n</code></pre>\n<p>（4）出队</p>\n<pre><code> bool DeQueue(LinkQueue &amp;Q,ElemType &amp;x)&#123;\n    if(Q.front==Q.rear) //空队\n       return false;\n    LinkNode *p =Q.front-&gt;next;\n    x=p-&gt;data;\n    Q.front-&gt;next=p-&gt;next;\n    if(Q.rear==p)\n       Q.rear=Q.front;//若原队列中只有一个结点，删除后变空\n    free(p);\n    return true;\n &#125;\n</code></pre>\n<h3 id=\"3链队列示例代码\"><a class=\"markdownIt-Anchor\" href=\"#3链队列示例代码\">#</a> 3. 链队列示例代码</h3>\n<p>链队列的操作：链队列的初始化、入链队列、链队列队头元素出链队列以及显示链队列所有数据元素的示例代码如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> QElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tQElemType data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;QNode,*QueuePtr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tQueuePtr rear;</span><br><span class=\"line\">\tQueuePtr front;</span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.front=Q.rear=(QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!Q.front)</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tQ.front-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue &amp;Q,QElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQueuePtr p;</span><br><span class=\"line\">\tp=(QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!p)</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tp-&gt;data=e;</span><br><span class=\"line\">\tp-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tQ.rear-&gt;next=p;</span><br><span class=\"line\">\tQ.rear=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">displayQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQueuePtr rear,front;</span><br><span class=\"line\">\tfront=Q.front-&gt;next;</span><br><span class=\"line\">\trear=Q.rear;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(front==rear)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;链队列为空!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(front!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,front-&gt;data);</span><br><span class=\"line\">\t\tfront=front-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">distoryQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(Q.front!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQ.rear=Q.front-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(Q.front);</span><br><span class=\"line\">\t\tQ.front=Q.rear;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue &amp;Q,QElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQueuePtr p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.front==Q.rear)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\tp=Q.front-&gt;next;</span><br><span class=\"line\">\te=p-&gt;data;</span><br><span class=\"line\">\tQ.front-&gt;next=p-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.rear==p)</span><br><span class=\"line\">\t\tQ.rear=Q.front;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLinkQueue Q;</span><br><span class=\"line\">\tInitQueue(Q);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;链队列中输入三个数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;10\\t20\\t30&quot;</span>);</span><br><span class=\"line\">\tEnQueue(Q,<span class=\"number\">10</span>);</span><br><span class=\"line\">\tEnQueue(Q,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tEnQueue(Q,<span class=\"number\">30</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输出链队列中的三个数据:\\n&quot;</span>);</span><br><span class=\"line\">\tdisplayQueue(Q);</span><br><span class=\"line\">\t<span class=\"type\">int</span> e;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;链队列对头元素出队:&quot;</span>);</span><br><span class=\"line\">\tDeQueue(Q,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队的元素为:e=%d\\n\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;初始化链队列:\\n\\n&quot;</span>);</span><br><span class=\"line\">\tdistoryQueue(Q);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231747688.png\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "栈和队列"
            ]
        },
        {
            "id": "http://example.com/2023/04/23/%E6%A0%88/",
            "url": "http://example.com/2023/04/23/%E6%A0%88/",
            "title": "栈",
            "date_published": "2023-04-23T09:14:32.000Z",
            "content_html": "<h1 id=\"关于栈的那些事\"><a class=\"markdownIt-Anchor\" href=\"#关于栈的那些事\">#</a> 关于栈的那些事</h1>\n<h2 id=\"11-栈的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#11-栈的基本概念\">#</a> 1.1 栈的基本概念</h2>\n<p>栈：栈是只允许在一端进行插入或删除操作的线性表。栈是一种线性表，但限定了这种线性表只能在某一端进行插入和删除操作。</p>\n<ul>\n<li>栈顶（top）：线性表允许进行插入删除的那一端</li>\n<li>栈底（bottom）：固定的，不允许进行插入和删除的那一端</li>\n<li>空栈：不含任何元素的空表</li>\n</ul>\n<p>栈的特性：后进先出或先进后出。<br>\n栈的应用：进制转换、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQTElQTglRTglQkUlQkUlRTUlQkMlOEYlRTYlQjElODIlRTUlODAlQkMmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">表达式求值</span>、括号匹配等。</p>\n<h4 id=\"12-栈的顺序存储结构\"><a class=\"markdownIt-Anchor\" href=\"#12-栈的顺序存储结构\">#</a> 1.2 栈的顺序存储结构</h4>\n<h5 id=\"1-顺序栈的实现\"><a class=\"markdownIt-Anchor\" href=\"#1-顺序栈的实现\">#</a> 1. 顺序栈的实现</h5>\n<p>采用顺序存储结构的栈称为顺序栈，利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针（top）指示当前栈顶元素的位置。</p>\n<p>栈的顺序存储结构类型描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50  <span class=\"comment\">//定义栈中元素的最大个数</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">   ElemType data[MaxSize];  <span class=\"comment\">//存放栈中元素</span></span><br><span class=\"line\">   <span class=\"type\">int</span> top;  <span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">   &#125;SqStack;  </span><br><span class=\"line\"><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>栈顶指针：S.top，初始时设置：S.top = -1，栈顶元素：S.data [S.top]<br>\n 进栈操作：栈不满时，栈顶指针先加 1，再送值到栈顶元素。<br>\n出栈操作：栈非空时，先去栈顶元素值，再将栈顶指针减 1。<br>\n栈空条件：S.top == -1，栈满条件：S.top == MaxSize-1，栈长：S.top + 1</p>\n<blockquote>\n<p>注意：顺序栈的入栈操作受数组上界的约束，当对栈的最大使用空间估计不足时，有可能会出现栈上溢出。栈和队列的判空、判断条件，根据实际给的条件不同而变化。</p>\n</blockquote>\n<h5 id=\"2-顺序栈的基本运算\"><a class=\"markdownIt-Anchor\" href=\"#2-顺序栈的基本运算\">#</a> 2. 顺序栈的基本运算</h5>\n<p>栈顶指针和栈中元素之间的关系如下图所示：<br>\n<img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231727786.jpg\" alt=\"0156ba11238cf6aedc3a1d7751241d1\" style=\"zoom: 67%;\" /><br>\n顺序栈常用的基本运算的代码实现如下所示：<br>\n(1) 初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span>&#123;</span><br><span class=\"line\">         S.top = <span class=\"number\">-1</span>;  <span class=\"comment\">//初始化栈顶指针</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>（2）判栈空</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">bool</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack S)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == <span class=\"number\">-1</span>)  <span class=\"comment\">//栈空</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">//栈非空</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>（3）进栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">bool</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;S,ElemType x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == MaxSize<span class=\"number\">-1</span>) <span class=\"comment\">//栈满，报错</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        S.data[++S.top] = x;  <span class=\"comment\">//指针先加1，再入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>（4）出栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">bool</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;S,ElemType &amp;x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == <span class=\"number\">-1</span>) <span class=\"comment\">//栈空，报错</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        x = S.data[S.top--];  <span class=\"comment\">//先出栈，指针再减1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>（5）读栈顶元素</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"type\">bool</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S,ElemType x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == <span class=\"number\">-1</span>) <span class=\"comment\">//栈空，报错</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">         x = S.data[S.top];  <span class=\"comment\">// x 记录栈顶元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>仅为读取栈顶元素，并没有出栈操作，原栈顶元素依然保留在栈中。</p>\n<blockquote>\n<p>注意：栈顶指针初始化为 S.top = -1，top 指向的是栈顶元素，进栈操作为 S.data [<ins>S.top] = x，出栈操作为 x = S.data [S.top-- ]。若栈顶指针初始化为 S.top = 0，即 top 指向栈顶元素的下一个位置，则入栈操作变为 S.data [S.top</ins>] = x，出栈操作变为 x = S.data [- -S.top]。相应的栈空、栈满条件也会发生变化。</p>\n</blockquote>\n<h5 id=\"4-顺序栈示例代码\"><a class=\"markdownIt-Anchor\" href=\"#4-顺序栈示例代码\">#</a> 4. 顺序栈示例代码</h5>\n<p>1、顺序栈的基本操作：顺序栈的初始化及其栈的入栈、出栈、查看栈中所有元素的示例代码如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INFEASIBLE -1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OVERFLOW -2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACK_INIT_SIZE 100  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACKINCREMENT 10    </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> SElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    SElemType *base; </span><br><span class=\"line\">    SElemType *top;  </span><br><span class=\"line\">    <span class=\"type\">int</span> stacksize;  </span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    S.base = (SElemType *)<span class=\"built_in\">malloc</span>(STACK_INIT_SIZE*<span class=\"keyword\">sizeof</span>(SElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base)</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(OVERFLOW); </span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">    S.stacksize = STACK_INIT_SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">DestroyStack</span><span class=\"params\">(SqStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;不存在该栈\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(S.base);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    e = *(S.top - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;S,SElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top - S.base &gt;= S.stacksize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        S.base = (SElemType*)<span class=\"built_in\">realloc</span>(S.base,(S.stacksize + STACKINCREMENT)*<span class=\"keyword\">sizeof</span>(SElemType));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S.base) </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">        S.top = S.base + S.stacksize;</span><br><span class=\"line\">        S.stacksize += STACKINCREMENT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *S.top++ = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;S,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    e = * --S.top;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">displayStack</span><span class=\"params\">(SqStack S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;该栈为空\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;S.top != S.base;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,*(--S.top));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    <span class=\"type\">int</span> e;</span><br><span class=\"line\">    InitStack(S);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;数据入栈:\\n&quot;</span>);</span><br><span class=\"line\">    Push(S,<span class=\"number\">10</span>);</span><br><span class=\"line\">    Push(S,<span class=\"number\">20</span>);</span><br><span class=\"line\">    Push(S,<span class=\"number\">30</span>);</span><br><span class=\"line\">\tdisplayStack(S);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;显示栈中的数据:\\n&quot;</span>);</span><br><span class=\"line\">    displayStack(S);</span><br><span class=\"line\">    GetTop(S,e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶的元素是:\\n%d\\n&quot;</span>,e);</span><br><span class=\"line\">    Pop(S,e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素出栈:\\n%d\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;显示栈中的数据:\\n&quot;</span>);</span><br><span class=\"line\">    displayStack(S);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210502084535554.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、顺序栈的应用：实现两个多项式的相加运算。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span>   </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PolynNode</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"type\">int</span> coef; </span><br><span class=\"line\">    <span class=\"type\">int</span> expn; </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PolynNode</span> *<span class=\"title\">next</span>;</span>  </span><br><span class=\"line\">&#125;PolynNode,*PolynList;  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreatePolyn</span><span class=\"params\">(PolynList &amp;L,<span class=\"type\">int</span> n)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> i;  </span><br><span class=\"line\">    PolynList p,q;  </span><br><span class=\"line\">    L=(PolynList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(PolynNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    q=L;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;成对输入%d个数据\\n&quot;</span>,n);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        p=(PolynList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(PolynNode));  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;p-&gt;coef,&amp;p-&gt;expn);   </span><br><span class=\"line\">        q-&gt;next=p;  </span><br><span class=\"line\">        q=q-&gt;next;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    p-&gt;next=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PolynTraverse</span><span class=\"params\">(PolynList L,<span class=\"type\">void</span>(*vi)(ElemType, ElemType))</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    PolynList p=L-&gt;next;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        vi(p-&gt;coef, p-&gt;expn);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;next)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; + &quot;</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        p=p-&gt;next;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(ElemType c, ElemType e)</span>   </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c != <span class=\"number\">0</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%dX^%d&quot;</span>,c,e);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">PolynList <span class=\"title function_\">MergeList</span><span class=\"params\">(PolynList La, PolynList Lb)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    PolynList pa, pb, pc, Lc;  </span><br><span class=\"line\">    pa = La-&gt;next;  </span><br><span class=\"line\">    pb = Lb-&gt;next;  </span><br><span class=\"line\">    Lc = pc = La;   </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pa&amp;&amp;pb)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa-&gt;expn &lt; pb-&gt;expn)          </span><br><span class=\"line\">        &#123;                                </span><br><span class=\"line\">            pc-&gt;next = pa;             </span><br><span class=\"line\">            pc = pa;  </span><br><span class=\"line\">            pa = pa-&gt;next;             </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pa -&gt;expn &gt; pb-&gt;expn )      </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            pc-&gt;next = pb;                </span><br><span class=\"line\">            pc = pb;  </span><br><span class=\"line\">            pb = pb-&gt;next;               </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            pa-&gt;coef = pa-&gt;coef + pb-&gt;coef;      </span><br><span class=\"line\">            pc-&gt;next = pa;  </span><br><span class=\"line\">            pc = pa;  </span><br><span class=\"line\">            pa = pa-&gt;next;             </span><br><span class=\"line\">            pb = pb-&gt;next;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    pc-&gt;next = pa ? pa:pb;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Lc;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    PolynList ha,hb,hc;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;非递减输入多项式A， &quot;</span>);  </span><br><span class=\"line\">    CreatePolyn(ha,<span class=\"number\">5</span>);   </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;非递减输入多项式B， &quot;</span>);  </span><br><span class=\"line\">    CreatePolyn(hb,<span class=\"number\">5</span>);    </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;多项式A :&quot;</span>);  </span><br><span class=\"line\">    PolynTraverse(ha, visit);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;多项式B :&quot;</span>);  </span><br><span class=\"line\">    PolynTraverse(hb, visit);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);  </span><br><span class=\"line\">   </span><br><span class=\"line\">    hc = MergeList(ha,hb);  </span><br><span class=\"line\">    PolynTraverse(hc, visit);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210502090607831.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"13-栈的链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#13-栈的链式存储结构\">#</a> 1.3 栈的链式存储结构</h4>\n<p>采用链式存储结构的栈称为链栈，链栈的优点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况。通常采用单链表实现，并规定所有操作都在单链表的表头进行。规定链栈没有头结点，LHead 指向栈顶元素，栈的链式存储结构如下图所示：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210502085037626.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n栈的链式存储结构类型描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span>&#123;</span></span><br><span class=\"line\">   ElemType data;  <span class=\"comment\">//数据域</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span> *<span class=\"title\">next</span>;</span>  <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;*LiStack;  <span class=\"comment\">//栈定义类型</span></span><br></pre></td></tr></table></figure>\n<p>采用链式存储，便于结点的插入和删除。链栈的操作和链表类似，入栈和出栈的操作都在链表的表头进行。对于带头结点和不带头结点的连载，具体的实现会有所不同。</p>\n<p>示例代码：链栈的初始化、入链栈、获取链栈顶元素以及输出链栈所有元素的代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TRUE 1;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FALSE 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;*LiStack;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(LiStack &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tL=(<span class=\"keyword\">struct</span> LinkNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">\tL-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">InputStack</span><span class=\"params\">(LiStack &amp;L,ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p;</span><br><span class=\"line\">\tp=(<span class=\"keyword\">struct</span> LinkNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">\tp-&gt;data=e;</span><br><span class=\"line\">\tp-&gt;next=L-&gt;next;</span><br><span class=\"line\">\tL-&gt;next=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">PrintStack</span><span class=\"params\">(LiStack &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p=L-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,p-&gt;data);</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">DestoryStack</span><span class=\"params\">(LiStack &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p;</span><br><span class=\"line\">\tp=L-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">GetTop</span><span class=\"params\">(LiStack &amp;L,ElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p=L-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\te=p-&gt;data;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack L;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1,e2,e3;</span><br><span class=\"line\">\tInitStack(L);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入三个数据进入链栈&quot;</span>);</span><br><span class=\"line\">\tInputStack(L,<span class=\"number\">10</span>);</span><br><span class=\"line\">\tInputStack(L,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tInputStack(L,<span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n链栈中的数据为:\\n&quot;</span>);</span><br><span class=\"line\">\tPrintStack(L);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取栈顶数据:\\n&quot;</span>);</span><br><span class=\"line\">\tGetTop(L,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶数据为e=%d\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输出链栈中全部数据:\\n&quot;</span>);</span><br><span class=\"line\">\tPrintStack(L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n初始化链栈:\\n&quot;</span>);</span><br><span class=\"line\">\tDestoryStack(L);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/2021050208571272.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "栈和队列"
            ]
        },
        {
            "id": "http://example.com/2023/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%A0%E9%A2%98/",
            "url": "http://example.com/2023/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%A0%E9%A2%98/",
            "title": "数据结构第二章线性表习题",
            "date_published": "2023-03-20T15:48:48.000Z",
            "content_html": "<h1 id=\"1将两个递增的有序链表合并为一个递增的有序链表-要求结果链表仍使用原来两个链表的存储空间不另外占用其他的存储空间-表中不允许有重复数据\"><a class=\"markdownIt-Anchor\" href=\"#1将两个递增的有序链表合并为一个递增的有序链表-要求结果链表仍使用原来两个链表的存储空间不另外占用其他的存储空间-表中不允许有重复数据\">#</a> 1. 将两个递增的有序链表合并为一个递增的有序链表。要求结果链表仍使用原来两个链表的存储空间，不另外占用其他的存储空间。表中不允许有重复数据</h1>\n<h2 id=\"代码如下\"><a class=\"markdownIt-Anchor\" href=\"#代码如下\">#</a> 代码如下：</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*将两个递增的有序链表合并为一个递增的有序链表。要求结果链表仍使用原来两个链表的存储空间，不另外占用其它其它的存储空间。表中不允许有重复数据 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> date;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;Linklist;</span><br><span class=\"line\"><span class=\"comment\">//构造头节点</span></span><br><span class=\"line\">Linklist* <span class=\"title function_\">toujiedian</span><span class=\"params\">(Linklist *L)</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\tL=(Linklist*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Linklist));</span><br><span class=\"line\">\tL-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> Linklist* <span class=\"title function_\">chushihualianbiao</span> <span class=\"params\">(<span class=\"type\">int</span> e)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> d=<span class=\"number\">1</span>,r;</span><br><span class=\"line\"> \tLinklist *L=toujiedian(L),*a,*b;</span><br><span class=\"line\"> \ta=L;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> i;</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;e;i++,d++)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\tb=(Linklist*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Linklist));</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入第%d个数&quot;</span>,d);</span><br><span class=\"line\"> \t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\"> \t\tb-&gt;date=r;</span><br><span class=\"line\"> \t\tb-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> \t\ta-&gt;next=b;<span class=\"comment\">//这里别接错线 </span></span><br><span class=\"line\"> \t\ta=a-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> L;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">spelling</span><span class=\"params\">(Linklist *L)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> \tLinklist *a;</span><br><span class=\"line\"> \ta=L-&gt;next;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;你输入的链表为：\\n&quot;</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(a)</span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,a-&gt;date);</span><br><span class=\"line\"> \t\ta=a-&gt;next;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Linklist* <span class=\"title function_\">MergeList</span><span class=\"params\">(Linklist *La,Linklist *Lb)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#123;<span class=\"comment\">//合并链表La和Lb，合并后的新表使用头指针Lc指向</span></span><br><span class=\"line\">\tLinklist *Lc;</span><br><span class=\"line\">    Linklist *pa,*pb,*pc,*q;</span><br><span class=\"line\">\t  pa=La-&gt;next; pb=Lb-&gt;next;   </span><br><span class=\"line\"> </span><br><span class=\"line\">\t  <span class=\"comment\">//pa和pb分别是链表La和Lb的工作指针,初始化为相应链表的第一个结点</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t  Lc=pc=La; <span class=\"comment\">//用La的头结点作为Lc的头结点</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t  <span class=\"keyword\">while</span>(pa &amp;&amp; pb)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#123;<span class=\"keyword\">if</span>(pa-&gt;date&lt;pb-&gt;date)&#123;pc-&gt;next=pa;pc=pa;pa=pa-&gt;next;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"comment\">//取较小者La中的元素，将pa链接在pc的后面，pa指针后移</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pa-&gt;date&gt;pb-&gt;date) &#123;pc-&gt;next=pb; pc=pb; pb=pb-&gt;next;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t     <span class=\"comment\">//取较小者Lb中的元素，将pb链接在pc的后面，pb指针后移</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"comment\">//相等时取La中的元素，删除Lb中的元素</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    &#123;     pc-&gt;next=pa;pc=pa;pa=pa-&gt;next;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t          q=pb-&gt;next;<span class=\"built_in\">free</span> (pb) ;pb =q;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t pc-&gt;next=pa?pa:pb;   <span class=\"comment\">//插入剩余段</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"built_in\">free</span> (Lb);           <span class=\"comment\">//释放Lb的头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Lc;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t   Linklist *L;</span><br><span class=\"line\">\t   <span class=\"type\">int</span> e; </span><br><span class=\"line\">    toujiedian(L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入第一个递增链表长度&quot;</span>);</span><br><span class=\"line\">   \t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;e) ;</span><br><span class=\"line\">    L=chushihualianbiao (e);</span><br><span class=\"line\">    spelling(L);</span><br><span class=\"line\">    Linklist *P,*O;</span><br><span class=\"line\">    <span class=\"type\">int</span> k; </span><br><span class=\"line\">    toujiedian(P);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输入第二个递增链表长度&quot;</span>);</span><br><span class=\"line\">   \t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;k) ;</span><br><span class=\"line\">    P=chushihualianbiao (k);</span><br><span class=\"line\">    spelling(P);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n两个链表合成后为:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//O=lianbiaoronghe(L,P );</span></span><br><span class=\"line\">    O=MergeList(L,P);</span><br><span class=\"line\">    spelling(O);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "习题答案"
            ]
        },
        {
            "id": "http://example.com/2023/03/10/ElemType%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "url": "http://example.com/2023/03/10/ElemType%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "title": "ElemType是什么？",
            "date_published": "2023-03-09T23:32:22.000Z",
            "content_html": "<p>在定义结构体 array 的时候有这样一段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">   ElemType data[maxsize];</span><br><span class=\"line\">   <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; <span class=\"built_in\">array</span>;</span><br></pre></td></tr></table></figure>\n<p>在《数据结构》中，关于数据元素的类型定义均用 “ElemType e；” 来表示，其中 e 是表示数据元素的变量，而 ElemType 则是它的类型，ElemType 的含义就是 “数据元素的类型”，是一个抽象的概念，是表示我们所要使用的数据元素应有的类型。</p>\n<p><strong>使用：typedef int ElemType;// 定义 ElemType 为 int 类型<br>\n你想让它是什么类型自己用 typedef 重定义就行。<br>\n也可以用模板表示，类似 template<class T>里面的 T。</strong></p>\n<p>这对于初学数据结构的学生来说理解起来有些难度，为了利于理解，我们可以把”ElemType “等同于” 一套房子 “来理解：<br>\n“一套房子” 的含义大家都非常清楚，但一套房子的具体含义是因人而异的，有的认为是 “四室二厅”，有的认为是 “二室一厅”，也有的认为是 “一室一厅”，对此大家也没有任何异议！其实 ElemType 也是这样的，它有时表示 “整型”，有时表示 “用户自定义的结构体”，也可以是其他形式的类型自由表示！</p>\n",
            "tags": [
                "细解"
            ]
        },
        {
            "id": "http://example.com/2023/03/09/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%B8%AD%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "http://example.com/2023/03/09/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%B8%AD%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "顺序表中基本操作的实现",
            "date_published": "2023-03-09T13:06:54.000Z",
            "content_html": "<h1 id=\"顺序表中基本操作的实现\"><a class=\"markdownIt-Anchor\" href=\"#顺序表中基本操作的实现\">#</a> 顺序表中基本操作的实现</h1>\n<p>线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，这种表示也称作线性表的顺序存储结构或顺序映像。通常，称这种存储结构的线性表为<strong>顺序表</strong>。起特点是，逻辑上相邻的数据元素，其物理次序也是相邻的。</p>\n<p>线性表的每一个数据元素的存储位置都和线性表的起始位置相差一个常数，这个常数和数据元素在线性表中的位序成正比。由此，只要确定了存储线性表的起始位置，线性表中任一数据元素都可随机存取，所以线性表的顺序存储结构是一种<strong>随机存取</strong>的存储结构。</p>\n<p>由于线性表的长度可变，且所需最大存储空间随问题不同而不同，则在 C 语言中可用动态分配的一维数组来表示线性表，格式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表的存储结构</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXISIZE 100 <span class=\"comment\">//顺序表可能达到的最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType* elem;<span class=\"comment\">//等同于ElemType elem[MAXISIZE]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> length;<span class=\"comment\">//当前长度</span></span><br><span class=\"line\">&#125;sqlist;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ol>\n<li><strong>数组空间通过后面算法初始化动态分配得到，初始化完成后，数组指针 elem 指示顺序表的基地址，数组空间大小为 MAXSIZE。</strong></li>\n<li><strong>元素类型定义中的 ElemType 数据类型是为了描述统一而自定的，在实际应用中，用户可根据实际需要具体定义表中数据元素的数据类型，可以是基本数据类型，如 int ,float ,char 等，也可以是构造数据类型，如 struct 结构体类型。</strong></li>\n<li><strong>length 表示顺序表中当前数据元素的个数。</strong></li>\n</ol>\n<p><strong>线性表初始化，取值，查找，插入，删除的完整代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OVERFLOW 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>  ERROR 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* elem;</span><br><span class=\"line\">\t<span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SqList&amp; L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tL.elem = new <span class=\"type\">int</span>[MAXSIZE];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!L.elem) <span class=\"built_in\">exit</span> (OVERFLOW);</span><br><span class=\"line\">\tL.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取值</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">GetElem</span><span class=\"params\">(SqList L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i&lt;<span class=\"number\">1</span> || i&gt;L.length) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\te = L.elem[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem</span><span class=\"params\">(SqList L, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>;i &lt; L.length;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L.elem[i] == e)<span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插入</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList&amp; L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((i &lt; <span class=\"number\">1</span>) || (i &gt; L.length + <span class=\"number\">1</span>))<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length == MAXSIZE) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = L.length - <span class=\"number\">1</span>;j &gt;= i - <span class=\"number\">1</span>;j--)</span><br><span class=\"line\">\t\tL.elem[j + <span class=\"number\">1</span>] = L.elem[j];</span><br><span class=\"line\">\tL.elem[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">\t++L.length;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList&amp; L, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((i &lt; <span class=\"number\">1</span>) || (i &gt; L.length)) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = i;j &lt;= L.length - <span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\tL.elem[j - <span class=\"number\">1</span>] = L.elem[j];</span><br><span class=\"line\">\t--L.length;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还没有调用，按需求调用</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "知识总结"
            ]
        },
        {
            "id": "http://example.com/2023/03/09/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "url": "http://example.com/2023/03/09/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "title": "线性表的类型定义",
            "date_published": "2023-03-09T11:54:04.000Z",
            "content_html": "<h1 id=\"线性表的类型定义\"><a class=\"markdownIt-Anchor\" href=\"#线性表的类型定义\">#</a> 线性表的类型定义</h1>\n<p>[TOC]</p>\n<blockquote>\n<p>数据结构三要素 —<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTklODAlQkIlRTglQkUlOTElRTclQkIlOTMlRTYlOUUlODQmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\"> 逻辑结构</span>、数据的运算、存储结构 (物理结构)【存储结构不同，运算的实现方式就不同】</p>\n</blockquote>\n<h1 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h1>\n<p>线性表是具有相同数据类型的 n (n≥0) 个数据元素的有限序列，其中 n 为表长，当 n=0 时线<br>\n性表是一个空表。若用命名线性表，则其一般表示为</p>\n<p>L = ( a 1 , a 2 , … , a i … , a n L=(a_1,a_2,…,a_i…,a_nL=(a1,a2,…,ai…,an</p>\n<ol>\n<li>a i a_iai 是线性表中的 “第 i 个” 元素线性表中的位序</li>\n<li>a 1 a_1a1 是表头元素；a n a_nan 是表尾元素</li>\n<li>除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且只有一个直接后继。</li>\n</ol>\n<p><img data-src=\"https://img-blog.csdnimg.cn/826f9cb758e2452281777a889debcf62.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\">#</a> 基本操作</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitList(&amp;L)：初始化表。构造一个空的线性表L，分配内存空间。</span><br><span class=\"line\"></span><br><span class=\"line\">DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</span><br><span class=\"line\"></span><br><span class=\"line\">ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</span><br><span class=\"line\"></span><br><span class=\"line\">ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</span><br><span class=\"line\"></span><br><span class=\"line\">LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。</span><br><span class=\"line\"></span><br><span class=\"line\">GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</span><br><span class=\"line\"></span><br><span class=\"line\">其他常用操作：</span><br><span class=\"line\"></span><br><span class=\"line\">Length(L) 求表长。返回线性表L的长度，即L中数据元素的个数。</span><br><span class=\"line\"></span><br><span class=\"line\">PrintList(L) 输出操作。按前后顺序输出线性表L的所有元素值。</span><br><span class=\"line\"></span><br><span class=\"line\">Empty(L) 判空操作。若L为空表，则返回<span class=\"literal\">true</span>，否则返回<span class=\"literal\">false</span>。</span><br></pre></td></tr></table></figure>\n<p><strong>值得注意的是：</strong></p>\n<ol>\n<li><strong>抽象数据类型仅是一个模型的定义，并不涉及模型的具体实现，因此这里描述中所涉及的参数不必考虑具体数据类型。在实际应用中，数据元素可能有多种类型，我们要随机应变。</strong></li>\n<li><strong>上述抽象数据类型中给出的操作只是基本操作，由这些基本操作可以构成其它较复杂的操作。</strong></li>\n<li><strong>对于不同的应用，基本操作的接口可能不同。</strong></li>\n<li><strong>由抽象数据类型定义的线性表，可以根据实际所采用的存储结构形式，进行具体的表示与实现。</strong></li>\n</ol>\n<p><img data-src=\"https://img-blog.csdnimg.cn/4c48d1a1f52d4f268a1e1112beacda96.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @author five-five</span></span><br><span class=\"line\"><span class=\"comment\"> * @created 2022/5/2</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INIT_SIZE 10 <span class=\"comment\">//初试长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;<span class=\"comment\">//顺序表的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *data;<span class=\"comment\">//顺序表的内容</span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxsize;<span class=\"comment\">//顺序表的最大长度</span></span><br><span class=\"line\">&#125; SeqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 1:success?fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">initList</span><span class=\"params\">(SeqList *l)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用malloc函数申请一片连续的存储空间</span></span><br><span class=\"line\">    <span class=\"comment\">//重点掌握为什么需要强转malloc()类型为int*类型</span></span><br><span class=\"line\">    <span class=\"comment\">//指针在移动是会根据sizeof(type)去进行移动，如果你不指定指针的类型，那么在指针移动检索的操作时，指针只会一个一个字节的去移动</span></span><br><span class=\"line\">    l-&gt;data = (<span class=\"type\">int</span> *) <span class=\"built_in\">malloc</span>(INIT_SIZE * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    l-&gt;length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    l-&gt;maxsize = INIT_SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len 长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 1:success?fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">increaseSize</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *pInt = l-&gt;data;</span><br><span class=\"line\">    l-&gt;data = (<span class=\"type\">int</span> *) <span class=\"built_in\">malloc</span>(l-&gt;maxsize + len * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"comment\">//复制</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l-&gt;length; ++i) &#123;</span><br><span class=\"line\">        l-&gt;data[i] = pInt[i];<span class=\"comment\">//将数据复制到新区域</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;maxsize = l-&gt;maxsize + len;<span class=\"comment\">//顺序表的最大长度增加len</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(pInt);<span class=\"comment\">//释放空间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e 插入元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">listInsert</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = l-&gt;length; j &gt;= i; --j) &#123;</span><br><span class=\"line\">        l-&gt;data[j] = l-&gt;data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;data[i] = e;</span><br><span class=\"line\">    l-&gt;length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e int 指针，用于接收删除值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">listDelete</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> i, <span class=\"type\">int</span> *e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; l-&gt;length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *e = l-&gt;data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; l-&gt;length; j++) &#123;</span><br><span class=\"line\">        l-&gt;data[j - <span class=\"number\">1</span>] = l-&gt;data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取出下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 要去除元素下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getElem</span><span class=\"params\">(SeqList l, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l.data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 按值查找，并返回下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e 要查找元素值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return -1表示没有找到</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">locateElem</span><span class=\"params\">(SeqList l, <span class=\"type\">int</span> e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e == l.data[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    SeqList seqList;</span><br><span class=\"line\">    initList(&amp;seqList);</span><br><span class=\"line\">    increaseSize(&amp;seqList, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%l&quot;</span>, <span class=\"keyword\">sizeof</span>(seqList));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "知识点总结"
            ]
        },
        {
            "id": "http://example.com/2023/03/09/c%E8%AF%AD%E8%A8%80malloc%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E6%84%8F%E4%B9%89/",
            "url": "http://example.com/2023/03/09/c%E8%AF%AD%E8%A8%80malloc%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E6%84%8F%E4%B9%89/",
            "title": "c语言malloc函数的用法和意义",
            "date_published": "2023-03-09T08:58:16.000Z",
            "content_html": "<p>当我们需要做一个成绩管理系统，人数可能为全校学生，也可能为一个班的学生，当我们开辟一个班的数组大小时，如果要存储整个学校的人数时，会出现内存不够用的情况；当我们开辟全校人数大小的数组时，输入一个班人数的大小时，会出现内存浪费的情况。<br>\n为了应对上述问题，我们引入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1tYWxsb2MmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\"> malloc</span> 函数。<br>\n<strong>malloc 时动态内存分配函数，用于申请一块连续的指定大小的内存块区域以 void * 类型返回分配的内存区域地址</strong></p>\n<h2 id=\"malloc函数原型\"><a class=\"markdownIt-Anchor\" href=\"#malloc函数原型\">#</a> malloc 函数原型</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern void *malloc(unsigned int num_bytes);</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>意为分配长度为 num_bytes 字节的内存块</p>\n<h2 id=\"malloc函数头文件\"><a class=\"markdownIt-Anchor\" href=\"#malloc函数头文件\">#</a> malloc 函数头文件</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;malloc.h&gt;</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h2 id=\"malloc函数返回值\"><a class=\"markdownIt-Anchor\" href=\"#malloc函数返回值\">#</a> malloc 函数返回值</h2>\n<p>如果分配成功则返回指向被分配内存的指针，否则返回空指针 NULL。</p>\n<h2 id=\"malloc函数使用注意事项\"><a class=\"markdownIt-Anchor\" href=\"#malloc函数使用注意事项\">#</a> malloc 函数使用注意事项</h2>\n<p>malloc 函数的返回的是无类型指针，在使用时一定要强制转换为所需要的类型。<br>\n<strong>（敲黑板）重点：在使用 malloc 开辟空间时，使用完成一定要释放空间，如果不释放会造内存泄漏。</strong><br>\n<strong>在使用 malloc 函数开辟的空间中，不要进行指针的移动，因为一旦移动之后可能出现申请的空间和释放空间大小的不匹配</strong></p>\n<h2 id=\"malloc函数使用形式\"><a class=\"markdownIt-Anchor\" href=\"#malloc函数使用形式\">#</a> malloc 函数使用形式</h2>\n<p>关于 malloc 所开辟空间类型：malloc 只开辟空间，不进行类型检查，只是在使用的时候进行类型的强转。<br>\n举个例子：‘我’开辟你所需要大小的字节大小空间，至于怎么使用是你的事<br>\n mallo 函数返回的实际是一个无类型指针，必须在其前面加上指针类型强制转换才可以使用<br>\n指针自身 = (指针类型 *）malloc（sizeof（指针类型）* 数据数量）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tint *p = NULL;</span><br><span class=\"line\">\tint n = 10;</span><br><span class=\"line\">\tp = (int *)malloc(sizeof(int)*n);</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<p>在使用 malloc 函数之前我们一定要<strong>计算字节数</strong>，malloc 开辟的是用户所需求的字节数大小的空间。<br>\n如果多次申请空间那么系统是如何做到空间的不重复使用呢？<br>\n在使用 malloc 开辟一段空间之后，系统会在这段空间之前做一个标记（0 或 1），当 malloc 函数开辟空间如果遇到标记为 0 就在此开辟，如果为 1 说明此空间正在被使用。</p>\n<h2 id=\"free函数\"><a class=\"markdownIt-Anchor\" href=\"#free函数\">#</a> free 函数</h2>\n<p>作用：释放 malloc (或 calloc、realloc) 函数给指针变量分配的内存空间。<br>\n注意：使用后该<strong>指针变量一定要重新指向 NULL</strong>，防止悬空指针（失效指针）出现，有效规避错误操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint *p = (int *)malloc(sizeof(int));</span><br><span class=\"line\">\t*p = 100;</span><br><span class=\"line\">\tfree(p);</span><br><span class=\"line\">\tp = NULL;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">1234567</span><br></pre></td></tr></table></figure>\n<p><strong>free 函数在释放空间之后，把内存前的标志变为 0，且为了防止数据泄露，它会把所释放的空间用 cd 进行填充。</strong></p>\n",
            "tags": [
                "巧思"
            ]
        },
        {
            "id": "http://example.com/2023/03/07/%E7%BB%AA%E8%AE%BA/",
            "url": "http://example.com/2023/03/07/%E7%BB%AA%E8%AE%BA/",
            "title": "绪论",
            "date_published": "2023-03-07T09:15:42.000Z",
            "content_html": "<h1 id=\"绪论\"><a class=\"markdownIt-Anchor\" href=\"#绪论\">#</a> 绪论</h1>\n<h2 id=\"树状图总结\"><a class=\"markdownIt-Anchor\" href=\"#树状图总结\">#</a> 树状图总结</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\"> </span><br><span class=\"line\">A[绪论] --&gt;B(数据结构)--&gt;C(逻辑结构)--&gt;a(线性结构)--&gt;d&#123;线性表&#125;</span><br><span class=\"line\">a--&gt;q&#123;栈和队列&#125; </span><br><span class=\"line\">a--&gt;w&#123;字符串&#125;</span><br><span class=\"line\">C--&gt;b(非线性结构)--&gt;e&#123;树状图&#125;</span><br><span class=\"line\">b--&gt;r&#123;图结构&#125;</span><br><span class=\"line\">B--&gt;D(存储结构)--&gt;t&#123;顺序存储结构&#125;</span><br><span class=\"line\">D--&gt;y&#123;链式存储结构&#125;</span><br><span class=\"line\">A[绪论] --&gt;c(算法)--&gt;u(定义)</span><br><span class=\"line\">  c--&gt;o(特性)</span><br><span class=\"line\">  c--&gt;p(评价标准)</span><br><span class=\"line\">  c--&gt;s(效率度量)--&gt;f&#123;时间复杂度&#125;</span><br><span class=\"line\">  s--&gt;g&#123;空间复杂度&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<h2 id=\"在这一章中主要介绍了数据结构的基本概念和术语以及算法和算法时间复杂度的分析方法\"><a class=\"markdownIt-Anchor\" href=\"#在这一章中主要介绍了数据结构的基本概念和术语以及算法和算法时间复杂度的分析方法\">#</a> 在这一章中主要介绍了数据结构的基本概念和术语，以及算法和算法时间复杂度的分析方法。</h2>\n<ul>\n<li>\n<p>数据结构是一门研究非数值计算程序设计中操作对象，以及这些对象之间的关系和操作对象，以及这些对象之间的关系和操作的学科。</p>\n</li>\n<li>\n<p>数据结构包括两个方面的内容：数据的逻辑结构和存储结构。同一逻辑结构采用不同的储存方法，可以得到不同的存储结构</p>\n<ol>\n<li>逻辑结构是从具体问题抽象出来的数学模型，从逻辑关系上描述数据，它与数据的存储无关。根据数据元素之间关系的不同特性，通常有四类基本逻辑结构：集合结构，线性结构，树形结构和图状结构。</li>\n<li>存储结构是逻辑结构在计算机中的存储表示，有两类存储结构：顺序粗出结构和链式存储结构。</li>\n</ol>\n</li>\n<li>\n<p>抽象数据类型是指由用户定义的，表示应用问题的数学模型，以及定义在这个模型上的一组操作的总称，具体包括三部分：数据对象，数据对象上关系的集合，以及对数据对象的基本操作的集合。</p>\n</li>\n<li>\n<p>算法是为了解决某类问题而规定的一个有限长的操作数列。算法具有四个特性：正确性，可读性，健壮性和高效性。</p>\n</li>\n<li>\n<p>算法分析的两个主要方面是分析算法的时间发杂度和空间复杂度，以考察算法的时间和空间效率。一般情况下，鉴于运算空间较为充足，故将算法的时间复杂度作为分析的重点。算法执行时间的数量级称为算法的渐近时间复杂度，T (n)=O (f (n))，它表示随着问题 n 的增大，算法执行时间的增长率和 f (n) 的增长率相同，简称时间复杂度。</p>\n</li>\n</ul>\n<h3 id=\"这一章的知识点并不多我着重讲一下时间复杂度的相关知识\"><a class=\"markdownIt-Anchor\" href=\"#这一章的知识点并不多我着重讲一下时间复杂度的相关知识\">#</a> 这一章的知识点并不多，我着重讲一下时间复杂度的相关知识</h3>\n<p>在描述算法复杂度时，经常用到 O (1) , O ( n ) , O ( l o g n ) , O ( n l o g n ) 来表示对应复杂度程度，不过目前大家默认也通过这几个方式表示<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclQTklQkElRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">空间复杂度</span> 。</p>\n<p>那么，O (1) , O ( n ) , O ( l o g n ) , O ( n l o g n ) 就可以看作既可表示算法复杂度，也可以表示空间复杂度。</p>\n<p>大 O 加上（）的形式，里面其实包裹的是一个函数 f () , O （ f () ） f (),O（f ()）f (),O（f ()）, 指明某个算法的耗时 / 耗空间与数据增长量之间的关系。其中的 n  代表输入数据的量。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200415110541459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5Nzc3NA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>如果 ax=N（a&gt;0，且 a≠1），那么数 x 叫做以 a 为底 N 的对数，记作 x=logaN，读作以 a 为底 N 的对数，其中 a 叫做对数的底数，N 叫做真数。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200415110548576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5Nzc3NA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n比如线段树复杂度 O (l o g n + n) ，查询修改都是 O ( l o g n ) <strong>刚学的时候简直惊为天人</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=i;++j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=j;++k)</span><br><span class=\"line\">                x=x+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">1234</span></span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">时间复杂度</span>是 O (n^3)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)</span><br><span class=\"line\">        i*=<span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">1234</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度 O (l o g 2 n)−&gt;O ( l o g n )<br>\n 评测机一般能过 10<sup>8~10</sup>9 ，根据评测机的性能以及程序的常数而定</p>\n",
            "tags": [
                "知识点总结"
            ]
        }
    ]
}