{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my world • All posts by \"数据结构与算法\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%A0%E9%A2%98/",
            "url": "http://example.com/2023/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B9%A0%E9%A2%98/",
            "title": "数据结构第二章线性表习题",
            "date_published": "2023-03-20T15:48:48.000Z",
            "content_html": "<h1 id=\"1-将两个递增的有序链表合并为一个递增的有序链表。要求结果链表仍使用原来两个链表的存储空间，不另外占用其他的存储空间。表中不允许有重复数据\"><a href=\"#1-将两个递增的有序链表合并为一个递增的有序链表。要求结果链表仍使用原来两个链表的存储空间，不另外占用其他的存储空间。表中不允许有重复数据\" class=\"headerlink\" title=\"1.将两个递增的有序链表合并为一个递增的有序链表。要求结果链表仍使用原来两个链表的存储空间，不另外占用其他的存储空间。表中不允许有重复数据\"></a>1.将两个递增的有序链表合并为一个递增的有序链表。要求结果链表仍使用原来两个链表的存储空间，不另外占用其他的存储空间。表中不允许有重复数据</h1><h2 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*将两个递增的有序链表合并为一个递增的有序链表。要求结果链表仍使用原来两个链表的存储空间，不另外占用其它其它的存储空间。表中不允许有重复数据 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> date;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;Linklist;</span><br><span class=\"line\"><span class=\"comment\">//构造头节点</span></span><br><span class=\"line\">Linklist* <span class=\"title function_\">toujiedian</span><span class=\"params\">(Linklist *L)</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\tL=(Linklist*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Linklist));</span><br><span class=\"line\">\tL-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> L;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> Linklist* <span class=\"title function_\">chushihualianbiao</span> <span class=\"params\">(<span class=\"type\">int</span> e)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> d=<span class=\"number\">1</span>,r;</span><br><span class=\"line\"> \tLinklist *L=toujiedian(L),*a,*b;</span><br><span class=\"line\"> \ta=L;</span><br><span class=\"line\"> \t<span class=\"type\">int</span> i;</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;e;i++,d++)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\tb=(Linklist*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Linklist));</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入第%d个数&quot;</span>,d);</span><br><span class=\"line\"> \t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;r);</span><br><span class=\"line\"> \t\tb-&gt;date=r;</span><br><span class=\"line\"> \t\tb-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"> \t\ta-&gt;next=b;<span class=\"comment\">//这里别接错线 </span></span><br><span class=\"line\"> \t\ta=a-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> L;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">spelling</span><span class=\"params\">(Linklist *L)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> \tLinklist *a;</span><br><span class=\"line\"> \ta=L-&gt;next;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;你输入的链表为：\\n&quot;</span>);</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(a)</span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,a-&gt;date);</span><br><span class=\"line\"> \t\ta=a-&gt;next;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Linklist* <span class=\"title function_\">MergeList</span><span class=\"params\">(Linklist *La,Linklist *Lb)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#123;<span class=\"comment\">//合并链表La和Lb，合并后的新表使用头指针Lc指向</span></span><br><span class=\"line\">\tLinklist *Lc;</span><br><span class=\"line\">    Linklist *pa,*pb,*pc,*q;</span><br><span class=\"line\">\t  pa=La-&gt;next; pb=Lb-&gt;next;   </span><br><span class=\"line\"> </span><br><span class=\"line\">\t  <span class=\"comment\">//pa和pb分别是链表La和Lb的工作指针,初始化为相应链表的第一个结点</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t  Lc=pc=La; <span class=\"comment\">//用La的头结点作为Lc的头结点</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t  <span class=\"keyword\">while</span>(pa &amp;&amp; pb)</span><br><span class=\"line\"> </span><br><span class=\"line\">\t&#123;<span class=\"keyword\">if</span>(pa-&gt;date&lt;pb-&gt;date)&#123;pc-&gt;next=pa;pc=pa;pa=pa-&gt;next;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"comment\">//取较小者La中的元素，将pa链接在pc的后面，pa指针后移</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pa-&gt;date&gt;pb-&gt;date) &#123;pc-&gt;next=pb; pc=pb; pb=pb-&gt;next;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t     <span class=\"comment\">//取较小者Lb中的元素，将pb链接在pc的后面，pb指针后移</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"keyword\">else</span> <span class=\"comment\">//相等时取La中的元素，删除Lb中的元素</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    &#123;     pc-&gt;next=pa;pc=pa;pa=pa-&gt;next;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t          q=pb-&gt;next;<span class=\"built_in\">free</span> (pb) ;pb =q;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t pc-&gt;next=pa?pa:pb;   <span class=\"comment\">//插入剩余段</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t    <span class=\"built_in\">free</span> (Lb);           <span class=\"comment\">//释放Lb的头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Lc;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t   Linklist *L;</span><br><span class=\"line\">\t   <span class=\"type\">int</span> e; </span><br><span class=\"line\">    toujiedian(L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入第一个递增链表长度&quot;</span>);</span><br><span class=\"line\">   \t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;e) ;</span><br><span class=\"line\">    L=chushihualianbiao (e);</span><br><span class=\"line\">    spelling(L);</span><br><span class=\"line\">    Linklist *P,*O;</span><br><span class=\"line\">    <span class=\"type\">int</span> k; </span><br><span class=\"line\">    toujiedian(P);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输入第二个递增链表长度&quot;</span>);</span><br><span class=\"line\">   \t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;k) ;</span><br><span class=\"line\">    P=chushihualianbiao (k);</span><br><span class=\"line\">    spelling(P);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n两个链表合成后为:\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//O=lianbiaoronghe(L,P );</span></span><br><span class=\"line\">    O=MergeList(L,P);</span><br><span class=\"line\">    spelling(O);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "习题答案"
            ]
        },
        {
            "id": "http://example.com/2023/03/10/ElemType%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "url": "http://example.com/2023/03/10/ElemType%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/",
            "title": "ElemType是什么？",
            "date_published": "2023-03-09T23:32:22.000Z",
            "content_html": "<p>在定义结构体array的时候有这样一段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">   ElemType data[maxsize];</span><br><span class=\"line\">   <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; <span class=\"built_in\">array</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在《数据结构》中，关于数据元素的类型定义均用“ ElemType e；”来表示，其中e是表示数据元素的变量，而ElemType则是它的类型，ElemType的含义就是“数据元素的类型”，是一个抽象的概念，是表示我们所要使用的数据元素应有的类型。</p>\n<p><strong>使用：typedef int ElemType;&#x2F;&#x2F;定义ElemType为int类型<br>你想让它是什么类型自己用typedef重定义就行。<br>也可以用模板表示，类似template<class T>里面的T。</strong></p>\n<p>这对于初学数据结构的学生来说理解起来有些难度，为了利于理解，我们可以把”ElemType“等同于”一套房子“来理解：<br>“一套房子”的含义大家都非常清楚，但一套房子的具体含义是因人而异的，有的认为是“四室二厅”，有的认为是“二室一厅”，也有的认为是“一室一厅”，对此大家也没有任何异议！其实ElemType也是这样的，它有时表示“整型”，有时表示“用户自定义的结构体”，也可以是其他形式的类型自由表示！</p>\n",
            "tags": [
                "细解"
            ]
        },
        {
            "id": "http://example.com/2023/03/09/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%B8%AD%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "http://example.com/2023/03/09/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%B8%AD%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "顺序表中基本操作的实现",
            "date_published": "2023-03-09T13:06:54.000Z",
            "content_html": "<h1 id=\"顺序表中基本操作的实现\"><a href=\"#顺序表中基本操作的实现\" class=\"headerlink\" title=\"顺序表中基本操作的实现\"></a>顺序表中基本操作的实现</h1><p>线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，这种表示也称作线性表的顺序存储结构或顺序映像。通常，称这种存储结构的线性表为<strong>顺序表</strong>。起特点是，逻辑上相邻的数据元素，其物理次序也是相邻的。</p>\n<p>线性表的每一个数据元素的存储位置都和线性表的起始位置相差一个常数，这个常数和数据元素在线性表中的位序成正比。由此，只要确定了存储线性表的起始位置，线性表中任一数据元素都可随机存取，所以线性表的顺序存储结构是一种<strong>随机存取</strong>的存储结构。</p>\n<p>由于线性表的长度可变，且所需最大存储空间随问题不同而不同，则在C语言中可用动态分配的一维数组来表示线性表，格式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表的存储结构</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXISIZE 100 <span class=\"comment\">//顺序表可能达到的最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType* elem;<span class=\"comment\">//等同于ElemType elem[MAXISIZE]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> length;<span class=\"comment\">//当前长度</span></span><br><span class=\"line\">&#125;sqlist;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ol>\n<li><strong>数组空间通过后面算法初始化动态分配得到，初始化完成后，数组指针elem指示顺序表的基地址，数组空间大小为MAXSIZE。</strong></li>\n<li><strong>元素类型定义中的ElemType数据类型是为了描述统一而自定的，在实际应用中，用户可根据实际需要具体定义表中数据元素的数据类型，可以是基本数据类型，如int ,float ,char 等，也可以是构造数据类型，如struct结构体类型。</strong></li>\n<li><strong>length表示顺序表中当前数据元素的个数。</strong></li>\n</ol>\n<p><strong>线性表初始化，取值，查找，插入，删除的完整代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OVERFLOW 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>  ERROR 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>* elem;</span><br><span class=\"line\">\t<span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125;SqList;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">InitList</span><span class=\"params\">(SqList&amp; L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tL.elem = new <span class=\"type\">int</span>[MAXSIZE];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!L.elem) <span class=\"built_in\">exit</span> (OVERFLOW);</span><br><span class=\"line\">\tL.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取值</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">GetElem</span><span class=\"params\">(SqList L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i&lt;<span class=\"number\">1</span> || i&gt;L.length) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\te = L.elem[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem</span><span class=\"params\">(SqList L, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>;i &lt; L.length;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L.elem[i] == e)<span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插入</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList&amp; L, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((i &lt; <span class=\"number\">1</span>) || (i &gt; L.length + <span class=\"number\">1</span>))<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (L.length == MAXSIZE) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = L.length - <span class=\"number\">1</span>;j &gt;= i - <span class=\"number\">1</span>;j--)</span><br><span class=\"line\">\t\tL.elem[j + <span class=\"number\">1</span>] = L.elem[j];</span><br><span class=\"line\">\tL.elem[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">\t++L.length;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList&amp; L, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((i &lt; <span class=\"number\">1</span>) || (i &gt; L.length)) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = i;j &lt;= L.length - <span class=\"number\">1</span>;j++)</span><br><span class=\"line\">\t\tL.elem[j - <span class=\"number\">1</span>] = L.elem[j];</span><br><span class=\"line\">\t--L.length;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还没有调用，按需求调用</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "知识总结"
            ]
        },
        {
            "id": "http://example.com/2023/03/09/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "url": "http://example.com/2023/03/09/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "title": "线性表的类型定义",
            "date_published": "2023-03-09T11:54:04.000Z",
            "content_html": "<h1 id=\"线性表的类型定义\"><a href=\"#线性表的类型定义\" class=\"headerlink\" title=\"线性表的类型定义\"></a>线性表的类型定义</h1><p>[TOC]</p>\n<blockquote>\n<p>数据结构三要素—<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTklODAlQkIlRTglQkUlOTElRTclQkIlOTMlRTYlOUUlODQmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">逻辑结构</span>、数据的运算、存储结构(物理结构)【存储结构不同，运算的实现方式就不同】</p>\n</blockquote>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>线性表是具有相同数据类型的n(n≥0)个数据元素的有限序列，其中n为表长，当n&#x3D;0时线<br>性表是一个空表。若用命名线性表，则其一般表示为</p>\n<p>L &#x3D; ( a 1 , a 2 , … , a i … , a n L&#x3D;(a_1,a_2,…,a_i…,a_nL&#x3D;(a1,a2,…,ai…,an</p>\n<ol>\n<li>a i a_iai是线性表中的“第i个”元素线性表中的位序</li>\n<li>a 1 a_1a1是表头元素；a n a_nan是表尾元素</li>\n<li>除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且只有一个直接后继。</li>\n</ol>\n<p><img data-src=\"https://img-blog.csdnimg.cn/826f9cb758e2452281777a889debcf62.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitList(&amp;L)：初始化表。构造一个空的线性表L，分配内存空间。</span><br><span class=\"line\"></span><br><span class=\"line\">DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</span><br><span class=\"line\"></span><br><span class=\"line\">ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</span><br><span class=\"line\"></span><br><span class=\"line\">ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</span><br><span class=\"line\"></span><br><span class=\"line\">LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。</span><br><span class=\"line\"></span><br><span class=\"line\">GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</span><br><span class=\"line\"></span><br><span class=\"line\">其他常用操作：</span><br><span class=\"line\"></span><br><span class=\"line\">Length(L) 求表长。返回线性表L的长度，即L中数据元素的个数。</span><br><span class=\"line\"></span><br><span class=\"line\">PrintList(L) 输出操作。按前后顺序输出线性表L的所有元素值。</span><br><span class=\"line\"></span><br><span class=\"line\">Empty(L) 判空操作。若L为空表，则返回<span class=\"literal\">true</span>，否则返回<span class=\"literal\">false</span>。</span><br></pre></td></tr></table></figure>\n<p><strong>值得注意的是：</strong></p>\n<ol>\n<li><strong>抽象数据类型仅是一个模型的定义，并不涉及模型的具体实现，因此这里描述中所涉及的参数不必考虑具体数据类型。在实际应用中，数据元素可能有多种类型，我们要随机应变。</strong></li>\n<li><strong>上述抽象数据类型中给出的操作只是基本操作，由这些基本操作可以构成其它较复杂的操作。</strong></li>\n<li><strong>对于不同的应用，基本操作的接口可能不同。</strong></li>\n<li><strong>由抽象数据类型定义的线性表，可以根据实际所采用的存储结构形式，进行具体的表示与实现。</strong></li>\n</ol>\n<p><img data-src=\"https://img-blog.csdnimg.cn/4c48d1a1f52d4f268a1e1112beacda96.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @author five-five</span></span><br><span class=\"line\"><span class=\"comment\"> * @created 2022/5/2</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INIT_SIZE 10 <span class=\"comment\">//初试长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;<span class=\"comment\">//顺序表的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *data;<span class=\"comment\">//顺序表的内容</span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxsize;<span class=\"comment\">//顺序表的最大长度</span></span><br><span class=\"line\">&#125; SeqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 1:success?fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">initList</span><span class=\"params\">(SeqList *l)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用malloc函数申请一片连续的存储空间</span></span><br><span class=\"line\">    <span class=\"comment\">//重点掌握为什么需要强转malloc()类型为int*类型</span></span><br><span class=\"line\">    <span class=\"comment\">//指针在移动是会根据sizeof(type)去进行移动，如果你不指定指针的类型，那么在指针移动检索的操作时，指针只会一个一个字节的去移动</span></span><br><span class=\"line\">    l-&gt;data = (<span class=\"type\">int</span> *) <span class=\"built_in\">malloc</span>(INIT_SIZE * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    l-&gt;length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    l-&gt;maxsize = INIT_SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len 长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 1:success?fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">increaseSize</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *pInt = l-&gt;data;</span><br><span class=\"line\">    l-&gt;data = (<span class=\"type\">int</span> *) <span class=\"built_in\">malloc</span>(l-&gt;maxsize + len * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"comment\">//复制</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l-&gt;length; ++i) &#123;</span><br><span class=\"line\">        l-&gt;data[i] = pInt[i];<span class=\"comment\">//将数据复制到新区域</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;maxsize = l-&gt;maxsize + len;<span class=\"comment\">//顺序表的最大长度增加len</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(pInt);<span class=\"comment\">//释放空间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e 插入元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">listInsert</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = l-&gt;length; j &gt;= i; --j) &#123;</span><br><span class=\"line\">        l-&gt;data[j] = l-&gt;data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;data[i] = e;</span><br><span class=\"line\">    l-&gt;length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e int 指针，用于接收删除值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">listDelete</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> i, <span class=\"type\">int</span> *e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; l-&gt;length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *e = l-&gt;data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; l-&gt;length; j++) &#123;</span><br><span class=\"line\">        l-&gt;data[j - <span class=\"number\">1</span>] = l-&gt;data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取出下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 要去除元素下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getElem</span><span class=\"params\">(SeqList l, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l.data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 按值查找，并返回下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e 要查找元素值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return -1表示没有找到</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">locateElem</span><span class=\"params\">(SeqList l, <span class=\"type\">int</span> e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e == l.data[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    SeqList seqList;</span><br><span class=\"line\">    initList(&amp;seqList);</span><br><span class=\"line\">    increaseSize(&amp;seqList, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%l&quot;</span>, <span class=\"keyword\">sizeof</span>(seqList));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "知识点总结"
            ]
        },
        {
            "id": "http://example.com/2023/03/09/c%E8%AF%AD%E8%A8%80malloc%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E6%84%8F%E4%B9%89/",
            "url": "http://example.com/2023/03/09/c%E8%AF%AD%E8%A8%80malloc%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E6%84%8F%E4%B9%89/",
            "title": "c语言malloc函数的用法和意义",
            "date_published": "2023-03-09T08:58:16.000Z",
            "content_html": "<p>当我们需要做一个成绩管理系统，人数可能为全校学生，也可能为一个班的学生，当我们开辟一个班的数组大小时，如果要存储整个学校的人数时，会出现内存不够用的情况；当我们开辟全校人数大小的数组时，输入一个班人数的大小时，会出现内存浪费的情况。<br>为了应对上述问题，我们引入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1tYWxsb2Mmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">malloc</span>函数。<br><strong>malloc时动态内存分配函数，用于申请一块连续的指定大小的内存块区域以void*类型返回分配的内存区域地址</strong></p>\n<h2 id=\"malloc函数原型\"><a href=\"#malloc函数原型\" class=\"headerlink\" title=\"malloc函数原型\"></a>malloc函数原型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern void *malloc(unsigned int num_bytes);</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>意为分配长度为num_bytes字节的内存块</p>\n<h2 id=\"malloc函数头文件\"><a href=\"#malloc函数头文件\" class=\"headerlink\" title=\"malloc函数头文件\"></a>malloc函数头文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;malloc.h&gt;</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"malloc函数返回值\"><a href=\"#malloc函数返回值\" class=\"headerlink\" title=\"malloc函数返回值\"></a>malloc函数返回值</h2><p>如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。</p>\n<h2 id=\"malloc函数使用注意事项\"><a href=\"#malloc函数使用注意事项\" class=\"headerlink\" title=\"malloc函数使用注意事项\"></a>malloc函数使用注意事项</h2><p>malloc函数的返回的是无类型指针，在使用时一定要强制转换为所需要的类型。<br><strong>（敲黑板）重点：在使用malloc开辟空间时，使用完成一定要释放空间，如果不释放会造内存泄漏。</strong><br><strong>在使用malloc函数开辟的空间中，不要进行指针的移动，因为一旦移动之后可能出现申请的空间和释放空间大小的不匹配</strong></p>\n<h2 id=\"malloc函数使用形式\"><a href=\"#malloc函数使用形式\" class=\"headerlink\" title=\"malloc函数使用形式\"></a>malloc函数使用形式</h2><p>关于malloc所开辟空间类型：malloc只开辟空间，不进行类型检查，只是在使用的时候进行类型的强转。<br>举个例子：‘我’开辟你所需要大小的字节大小空间，至于怎么使用是你的事<br>mallo函数返回的实际是一个无类型指针，必须在其前面加上指针类型强制转换才可以使用<br>指针自身 &#x3D; (指针类型<em>）malloc（sizeof（指针类型）</em>数据数量）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tint *p = NULL;</span><br><span class=\"line\">\tint n = 10;</span><br><span class=\"line\">\tp = (int *)malloc(sizeof(int)*n);</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p>在使用malloc函数之前我们一定要<strong>计算字节数</strong>，malloc开辟的是用户所需求的字节数大小的空间。<br>如果多次申请空间那么系统是如何做到空间的不重复使用呢？<br>在使用malloc开辟一段空间之后，系统会在这段空间之前做一个标记（0或1），当malloc函数开辟空间如果遇到标记为0就在此开辟，如果为1说明此空间正在被使用。</p>\n<h2 id=\"free函数\"><a href=\"#free函数\" class=\"headerlink\" title=\"free函数\"></a>free函数</h2><p>作用：释放malloc(或calloc、realloc)函数给指针变量分配的内存空间。<br>注意：使用后该<strong>指针变量一定要重新指向NULL</strong>，防止悬空指针（失效指针）出现，有效规避错误操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint *p = (int *)malloc(sizeof(int));</span><br><span class=\"line\">\t*p = 100;</span><br><span class=\"line\">\tfree(p);</span><br><span class=\"line\">\tp = NULL;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">1234567</span><br></pre></td></tr></table></figure>\n\n<p><strong>free函数在释放空间之后，把内存前的标志变为0，且为了防止数据泄露，它会把所释放的空间用cd进行填充。</strong></p>\n",
            "tags": [
                "巧思"
            ]
        },
        {
            "id": "http://example.com/2023/03/07/%E7%BB%AA%E8%AE%BA/",
            "url": "http://example.com/2023/03/07/%E7%BB%AA%E8%AE%BA/",
            "title": "绪论",
            "date_published": "2023-03-07T09:15:42.000Z",
            "content_html": "<h1 id=\"绪论\"><a href=\"#绪论\" class=\"headerlink\" title=\"绪论\"></a>绪论</h1><h2 id=\"树状图总结\"><a href=\"#树状图总结\" class=\"headerlink\" title=\"树状图总结\"></a>树状图总结</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\"> </span><br><span class=\"line\">A[绪论] --&gt;B(数据结构)--&gt;C(逻辑结构)--&gt;a(线性结构)--&gt;d&#123;线性表&#125;</span><br><span class=\"line\">a--&gt;q&#123;栈和队列&#125; </span><br><span class=\"line\">a--&gt;w&#123;字符串&#125;</span><br><span class=\"line\">C--&gt;b(非线性结构)--&gt;e&#123;树状图&#125;</span><br><span class=\"line\">b--&gt;r&#123;图结构&#125;</span><br><span class=\"line\">B--&gt;D(存储结构)--&gt;t&#123;顺序存储结构&#125;</span><br><span class=\"line\">D--&gt;y&#123;链式存储结构&#125;</span><br><span class=\"line\">A[绪论] --&gt;c(算法)--&gt;u(定义)</span><br><span class=\"line\">  c--&gt;o(特性)</span><br><span class=\"line\">  c--&gt;p(评价标准)</span><br><span class=\"line\">  c--&gt;s(效率度量)--&gt;f&#123;时间复杂度&#125;</span><br><span class=\"line\">  s--&gt;g&#123;空间复杂度&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在这一章中主要介绍了数据结构的基本概念和术语，以及算法和算法时间复杂度的分析方法。\"><a href=\"#在这一章中主要介绍了数据结构的基本概念和术语，以及算法和算法时间复杂度的分析方法。\" class=\"headerlink\" title=\"在这一章中主要介绍了数据结构的基本概念和术语，以及算法和算法时间复杂度的分析方法。\"></a>在这一章中主要介绍了数据结构的基本概念和术语，以及算法和算法时间复杂度的分析方法。</h2><ul>\n<li><p>数据结构是一门研究非数值计算程序设计中操作对象，以及这些对象之间的关系和操作对象，以及这些对象之间的关系和操作的学科。</p>\n</li>\n<li><p>数据结构包括两个方面的内容：数据的逻辑结构和存储结构。同一逻辑结构采用不同的储存方法，可以得到不同的存储结构</p>\n<ol>\n<li>逻辑结构是从具体问题抽象出来的数学模型，从逻辑关系上描述数据，它与数据的存储无关。根据数据元素之间关系的不同特性，通常有四类基本逻辑结构：集合结构，线性结构，树形结构和图状结构。</li>\n<li>存储结构是逻辑结构在计算机中的存储表示，有两类存储结构:顺序粗出结构和链式存储结构。</li>\n</ol>\n</li>\n<li><p>抽象数据类型是指由用户定义的，表示应用问题的数学模型，以及定义在这个模型上的一组操作的总称，具体包括三部分：数据对象，数据对象上关系的集合，以及对数据对象的基本操作的集合。</p>\n</li>\n<li><p>算法是为了解决某类问题而规定的一个有限长的操作数列。算法具有四个特性：正确性，可读性，健壮性和高效性。</p>\n</li>\n<li><p>算法分析的两个主要方面是分析算法的时间发杂度和空间复杂度，以考察算法的时间和空间效率。一般情况下，鉴于运算空间较为充足，故将算法的时间复杂度作为分析的重点。算法执行时间的数量级称为算法的渐近时间复杂度，T(n)&#x3D;O(f(n))，它表示随着问题n的增大，算法执行时间的增长率和f(n)的增长率相同，简称时间复杂度。</p>\n</li>\n</ul>\n<h3 id=\"这一章的知识点并不多，我着重讲一下时间复杂度的相关知识\"><a href=\"#这一章的知识点并不多，我着重讲一下时间复杂度的相关知识\" class=\"headerlink\" title=\"这一章的知识点并不多，我着重讲一下时间复杂度的相关知识\"></a>这一章的知识点并不多，我着重讲一下时间复杂度的相关知识</h3><p>在描述算法复杂度时，经常用到O ( 1 ) , O ( n ) , O ( l o g n ) , O ( n l o g n ) 来表示对应复杂度程度, 不过目前大家默认也通过这几个方式表示<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclQTklQkElRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTYmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">空间复杂度</span> 。</p>\n<p>那么，O ( 1 ) , O ( n ) , O ( l o g n ) , O ( n l o g n )就可以看作既可表示算法复杂度，也可以表示空间复杂度。</p>\n<p>大O加上（）的形式，里面其实包裹的是一个函数f ( ) , O （ f ( ) ） f(),O（f()）f(),O（f()）,指明某个算法的耗时&#x2F;耗空间与数据增长量之间的关系。其中的 n  代表输入数据的量。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200415110541459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5Nzc3NA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>如果ax&#x3D;N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数，记作x&#x3D;logaN，读作以a为底N的对数，其中a叫做对数的底数，N叫做真数。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200415110548576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5Nzc3NA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>比如线段树复杂度O ( l o g n + n ) ，查询修改都是O ( l o g n ) <strong>刚学的时候简直惊为天人</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=i;++j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=j;++k)</span><br><span class=\"line\">                x=x+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">1234</span></span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTYmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">时间复杂度</span>是 O(n^3)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)</span><br><span class=\"line\">        i*=<span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">1234</span></span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度O ( l o g 2 n )−&gt;O ( l o g n )<br>评测机一般能过10^8~10^9 ，根据评测机的性能以及程序的常数而定</p>\n",
            "tags": [
                "知识点总结"
            ]
        }
    ]
}