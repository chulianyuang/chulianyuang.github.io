{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my world • All posts by \"巧思\" tag",
    "description": "",
    "home_page_url": "https://chulianyuang.github.io",
    "items": [
        {
            "id": "https://chulianyuang.github.io/2023/03/09/c%E8%AF%AD%E8%A8%80malloc%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E6%84%8F%E4%B9%89/",
            "url": "https://chulianyuang.github.io/2023/03/09/c%E8%AF%AD%E8%A8%80malloc%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E6%84%8F%E4%B9%89/",
            "title": "c语言malloc函数的用法和意义",
            "date_published": "2023-03-09T08:58:16.000Z",
            "content_html": "<p>当我们需要做一个成绩管理系统，人数可能为全校学生，也可能为一个班的学生，当我们开辟一个班的数组大小时，如果要存储整个学校的人数时，会出现内存不够用的情况；当我们开辟全校人数大小的数组时，输入一个班人数的大小时，会出现内存浪费的情况。<br>为了应对上述问题，我们引入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1tYWxsb2Mmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">malloc</span>函数。<br><strong>malloc时动态内存分配函数，用于申请一块连续的指定大小的内存块区域以void*类型返回分配的内存区域地址</strong></p>\n<h2 id=\"malloc函数原型\"><a href=\"#malloc函数原型\" class=\"headerlink\" title=\"malloc函数原型\"></a>malloc函数原型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern void *malloc(unsigned int num_bytes);</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>意为分配长度为num_bytes字节的内存块</p>\n<h2 id=\"malloc函数头文件\"><a href=\"#malloc函数头文件\" class=\"headerlink\" title=\"malloc函数头文件\"></a>malloc函数头文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;malloc.h&gt;</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"malloc函数返回值\"><a href=\"#malloc函数返回值\" class=\"headerlink\" title=\"malloc函数返回值\"></a>malloc函数返回值</h2><p>如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。</p>\n<h2 id=\"malloc函数使用注意事项\"><a href=\"#malloc函数使用注意事项\" class=\"headerlink\" title=\"malloc函数使用注意事项\"></a>malloc函数使用注意事项</h2><p>malloc函数的返回的是无类型指针，在使用时一定要强制转换为所需要的类型。<br><strong>（敲黑板）重点：在使用malloc开辟空间时，使用完成一定要释放空间，如果不释放会造内存泄漏。</strong><br><strong>在使用malloc函数开辟的空间中，不要进行指针的移动，因为一旦移动之后可能出现申请的空间和释放空间大小的不匹配</strong></p>\n<h2 id=\"malloc函数使用形式\"><a href=\"#malloc函数使用形式\" class=\"headerlink\" title=\"malloc函数使用形式\"></a>malloc函数使用形式</h2><p>关于malloc所开辟空间类型：malloc只开辟空间，不进行类型检查，只是在使用的时候进行类型的强转。<br>举个例子：‘我’开辟你所需要大小的字节大小空间，至于怎么使用是你的事<br>mallo函数返回的实际是一个无类型指针，必须在其前面加上指针类型强制转换才可以使用<br>指针自身 &#x3D; (指针类型<em>）malloc（sizeof（指针类型）</em>数据数量）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tint *p = NULL;</span><br><span class=\"line\">\tint n = 10;</span><br><span class=\"line\">\tp = (int *)malloc(sizeof(int)*n);</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n\n<p>在使用malloc函数之前我们一定要<strong>计算字节数</strong>，malloc开辟的是用户所需求的字节数大小的空间。<br>如果多次申请空间那么系统是如何做到空间的不重复使用呢？<br>在使用malloc开辟一段空间之后，系统会在这段空间之前做一个标记（0或1），当malloc函数开辟空间如果遇到标记为0就在此开辟，如果为1说明此空间正在被使用。</p>\n<h2 id=\"free函数\"><a href=\"#free函数\" class=\"headerlink\" title=\"free函数\"></a>free函数</h2><p>作用：释放malloc(或calloc、realloc)函数给指针变量分配的内存空间。<br>注意：使用后该<strong>指针变量一定要重新指向NULL</strong>，防止悬空指针（失效指针）出现，有效规避错误操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint *p = (int *)malloc(sizeof(int));</span><br><span class=\"line\">\t*p = 100;</span><br><span class=\"line\">\tfree(p);</span><br><span class=\"line\">\tp = NULL;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">1234567</span><br></pre></td></tr></table></figure>\n\n<p><strong>free函数在释放空间之后，把内存前的标志变为0，且为了防止数据泄露，它会把所释放的空间用cd进行填充。</strong></p>\n",
            "tags": [
                "巧思"
            ]
        }
    ]
}