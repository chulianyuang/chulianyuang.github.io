{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my world • All posts by \"栈和队列\" tag",
    "description": "",
    "home_page_url": "https://chulianyuang.github.io",
    "items": [
        {
            "id": "https://chulianyuang.github.io/2023/05/22/%E9%98%9F%E5%88%97/",
            "url": "https://chulianyuang.github.io/2023/05/22/%E9%98%9F%E5%88%97/",
            "title": "队列",
            "date_published": "2023-05-22T09:30:12.000Z",
            "content_html": "<h1 id=\"2-队列\"><a class=\"markdownIt-Anchor\" href=\"#2-队列\">#</a> 2、队列</h1>\n<h2 id=\"21-队列的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#21-队列的基本概念\">#</a> 2.1 队列的基本概念</h2>\n<p>队列：队列简称队，是一种操作受限的线性表，只允许在表的一端进行插入，而在表的另一端进行删除。向队列种插入元素称为入队或进队；删除元素称为出队或离队。队列的示意图如下所示：</p>\n<p>对头（front）：允许删除的一端，又称队首。<br>\n队尾（rear）：允许插入的一端。<br>\n空队列：不含任何元素的空表。<br>\n队列的特性：先进先出。<br>\n队列的应用：速度不匹配问题、多用户资源竞争问题。</p>\n<p>注意：栈和队列都是操作受限的线性表，不是任何对线性表的操作都适合栈和队列的操作，不可以随便读取栈或队列中间的某个元素。</p>\n<h2 id=\"22-队列的顺序存储结构\"><a class=\"markdownIt-Anchor\" href=\"#22-队列的顺序存储结构\">#</a> 2.2 队列的顺序存储结构</h2>\n<h3 id=\"1队列的顺序存储\"><a class=\"markdownIt-Anchor\" href=\"#1队列的顺序存储\">#</a> 1. 队列的顺序存储</h3>\n<p>队列的顺序实现是指分配一块连续的存储单元存放队列中的元素，并附设两个指针：对头指针 front 指向对头元素，队尾指针 rear 指向队尾元素的下一个位置。</p>\n<p>队列的顺序存储类型描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50  <span class=\"comment\">//定义队列中元素的最大个数</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">   ElemType data[MaxSize];  <span class=\"comment\">//存放队列元素</span></span><br><span class=\"line\">   <span class=\"type\">int</span> front,rear;  <span class=\"comment\">//队头指针和队尾指针</span></span><br><span class=\"line\">   &#125; SqQueue;</span><br></pre></td></tr></table></figure>\n<p>初始状态（队空条件）：Q.front == Q.rear == 0<br>\n 进队操作：队不满时，先送值到队尾元素，再将队尾指针加 1<br>\n 出队操作：队不空时，先取队头元素值，再将队头指针加 1</p>\n<p>队列的操作示意图如下图所示：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231746417.png\" alt=\"在这里插入图片描述\"></p>\n<p>队列操作示意图中 d 图所示，队列中仅有一个元素，再进行入队操作时，会出现 “上溢出”，但这种溢出不是真正的溢出，在队列数组中仍然存在可以存放元素的空位置，这是一种 “假溢出”。</p>\n<h3 id=\"2循环队列\"><a class=\"markdownIt-Anchor\" href=\"#2循环队列\">#</a> 2. 循环队列</h3>\n<p>循环队列：将顺序队列臆造成一个环状的空间，即把存储队列元素的表从逻辑上视为一个环，称为循环队列。</p>\n<p>当队首指针 Q.front = MaxSize-1 后，再前进一个位置就会自动到 0，可利用除法取余（%）来实现。</p>\n<p>初始时：Q.front = Q.rear = 0<br>\n 队首指针进 1：Q.front = (Q.front + 1)% MaxSize<br>\n 队尾指针进 1：Q.rear = (Q.rear + 1)% MaxSize<br>\n 队列长度：(Q.rear + MaxSize - Q.front)% MaxSize<br>\n 出队入队时：指针都按照顺时针方向进 1<br>\n<strong> 注意：不能用动态分配的一维数组来实现循环队列，初始化时必须设定一个最大队列长度。</strong></p>\n<h4 id=\"为了区分循环队列队空还是队满情况有三种处理方式其中第一种为常用的区分方式重点掌握\"><a class=\"markdownIt-Anchor\" href=\"#为了区分循环队列队空还是队满情况有三种处理方式其中第一种为常用的区分方式重点掌握\">#</a> <strong>为了区分循环队列队空还是队满情况，有三种处理方式，其中第一种为常用的区分方式，重点掌握：</strong></h4>\n<p>（1）牺牲一个单元来区分队空还是队满，入队时少用一个队列单元，约定以 “队头指针在队尾的下一个指针作为堆满标志”。如下图 (d2) 所示。</p>\n<p>队满条件： (Q.rear + 1)% MaxSize == Q.front<br>\n 队空条件：Q.front == Q.rear<br>\n 队列中元素的个数：(Q.rear + MaxSize - Q.front)% MaxSize<br>\n（2）类型中增设表示元素个数的数据成员。对空的条件为 Q.size = 0，队满的条件为 Q.size == MaxSize，有 Q.front == Q.rear。<br>\n（3）类型中增设 tag 数据成员，以区分是队空还是队满。tag = 0 时，若因删除导致 Q.front == Q.rear，则为队空；tag = 1 时，若因插入导致 Q.front == Q.rear，则为队满。</p>\n<p>循环队列出入队示意图如下所示：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231746287.png\" alt=\"在这里插入图片描述\"></p>\n<p>3 . 循环队列的操作</p>\n<p>（1）初始化</p>\n   <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue &amp;Q)</span>&#123;</span><br><span class=\"line\">   Q.front == Q.rear=<span class=\"number\">0</span>;  <span class=\"comment\">//初始化队首、队尾指针</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）判队空</p>\n<pre><code> bool isEmpty(SqQueue Q)&#123;\n    if(Q.front == Q.rear) //队空条件\n       return true;\n    else\n       return false;\n &#125;\n</code></pre>\n<p>（3）入队</p>\n<pre><code> bool EnQueue(SqQueue &amp;Q,ElemType x)&#123;\n    if( (Q.rear + 1)%MaxSize == Q.front) //队满则报错\n       return false; \n    Q.data[Q.rear]=x;\n    Q.rear= (Q.rear + 1)%MaxSize;  //队尾指针加1模\n    return true;\n &#125;   \n</code></pre>\n<p>（4）出队</p>\n<pre><code> bool DeQueue(SqQueue &amp;Q,ElemType &amp;x)&#123;\n    if(Q.front == Q.rear)  //队空则报错\n       return false;\n    x=Q.data[Q.front]; \n    Q.front = (Q.front + 1)%MaxSize;  //队头指针加1取模\n    return true;\n &#125;\n</code></pre>\n<ol start=\"4\">\n<li>顺序队列示例代码<br>\n顺序队列基本操作：顺序队列的初始化、入队列、出队列以及显示队列中的数据元素的示例代码如下所示：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QINITSIZE 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> QINCRECEMENT 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> null 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> QElemType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QueueType</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    QElemType *front;</span><br><span class=\"line\">    QElemType *rear;</span><br><span class=\"line\">    <span class=\"type\">int</span> qsize;</span><br><span class=\"line\">&#125;<span class=\"built_in\">queue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">q_init</span><span class=\"params\">(<span class=\"built_in\">queue</span> *q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tq-&gt;front = (QElemType *)<span class=\"built_in\">malloc</span>(QINITSIZE*<span class=\"keyword\">sizeof</span>(QElemType));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q-&gt;front == null)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\tq-&gt;rear = q-&gt;front;</span><br><span class=\"line\">\tq-&gt;qsize = QINITSIZE;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">Enqueue</span><span class=\"params\">(<span class=\"built_in\">queue</span> *q,<span class=\"type\">int</span> e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q-&gt;rear - q-&gt;front &gt;= QINITSIZE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tq-&gt;front = (QElemType *)<span class=\"built_in\">realloc</span>(q,(q-&gt;qsize + QINCRECEMENT)*<span class=\"keyword\">sizeof</span>(QElemType));</span><br><span class=\"line\">\t\tq-&gt;rear = q-&gt;front;</span><br><span class=\"line\">\t\tq-&gt;qsize += QINCRECEMENT; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*q-&gt;rear++ = e;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">Dequeue</span><span class=\"params\">(<span class=\"built_in\">queue</span> *q,<span class=\"type\">int</span> *e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q-&gt;rear == q-&gt;front)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\t*e = *q-&gt;front++;</span><br><span class=\"line\">\tq-&gt;qsize--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span> q;</span><br><span class=\"line\">\tQElemType e,*p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(q_init(&amp;q))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;顺序队列创建成功!\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">1</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">2</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">3</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">4</span>);</span><br><span class=\"line\">\tEnqueue(&amp;q,<span class=\"number\">5</span>);</span><br><span class=\"line\">\tp = q.front;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;顺序队列里面的数据为:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &lt; q.rear)</span><br><span class=\"line\">\t    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,*p++);</span><br><span class=\"line\">\tDequeue(&amp;q,&amp;e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n被删除的元素:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,e);</span><br><span class=\"line\">\tp=q.front;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;删除队头后的数据为:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p&lt;q.rear)</span><br><span class=\"line\">\t     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,*p++);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示：<img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231746520.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"23-队列的链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#23-队列的链式存储结构\">#</a> 2.3 队列的链式存储结构</h2>\n<h3 id=\"1队列的链式存储\"><a class=\"markdownIt-Anchor\" href=\"#1队列的链式存储\">#</a> 1. 队列的链式存储</h3>\n<p>队列的链式表示称为链队列，实际上是一个同时带有队头指针和队尾指针的单链表。头指针指向队头结点，尾指针指向队尾结点，即单链表的最后一个结点。</p>\n<p>队列的不带头结点的链式存储示意图如下图所示：<img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231747307.png\" alt=\"在这里插入图片描述\"></p>\n<p>队列的链式存储类型代码描述如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span>  <span class=\"comment\">//链式队列结点</span></span><br><span class=\"line\">   ElemType data;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span>  <span class=\"comment\">//链式队列</span></span><br><span class=\"line\">   LinkNode *front,*rear;  <span class=\"comment\">//队列的队头和队尾指针</span></span><br><span class=\"line\">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>\n<p>当 Q.front == NULL 且 Q.rear == NULL 时，链式队列为空。</p>\n<p>出队时，首先判断队是否为空，若不空，则取出队头元素，将其从链表中移除，并让 Q.front 指向下一个结点（若该结点为最后一个结点，则令 Q.front 和 Q.rear 都为 NULL）。入队时，建立一个新结点，将新结点插入到链表的尾部，并改让 Q.rear 指向这个新插入的结点（若原队列为空队，则另 Q.front 也指向该结点）。</p>\n<p>由于不带头结点的链式队列在操作上比较麻烦，因此通常将链式队列设计成一个带头结点的单链表，实现插入和删除相统一。带头结点和不带头结点的链式队列如下图所示：</p>\n<p><strong>优点：用单链表表示的链式队列特别适合于数据元素变动比较大的情形，而且不存在队列满且产生溢出的问题。</strong></p>\n<h3 id=\"2链式队列的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#2链式队列的基本操作\">#</a> 2. 链式队列的基本操作</h3>\n<p>（1）初始化</p>\n<pre><code> void InitQueue(LinkQueue &amp;Q)&#123;\n    Q.front = Q.rear = (LinkNode *)malloc(sizeof(LinkNode));//建立头结点\n    Q.front-&gt;next =NULL; //初始为空\n</code></pre>\n<p>（2）判队空</p>\n<pre><code> bool IsEmpty(LinkQueue Q)&#123;\n    if(Q.front == Q.rear) \n       return true;\n    else\n       return false;\n &#125;\n</code></pre>\n<p>（3）入队</p>\n<pre><code> void EnQueue(LinkQueue &amp;Q，ElemTyepe x)&#123;\n    LinkNode *s=(LinkNode *)malloc(sizeof(LinkNode));\n    s-&gt;data=x; //创建新结点，插入到链尾\n    s-&gt;next=null;\n    Q.rear-&gt;next=s;\n    Q.rear=s;\n &#125;\n</code></pre>\n<p>（4）出队</p>\n<pre><code> bool DeQueue(LinkQueue &amp;Q,ElemType &amp;x)&#123;\n    if(Q.front==Q.rear) //空队\n       return false;\n    LinkNode *p =Q.front-&gt;next;\n    x=p-&gt;data;\n    Q.front-&gt;next=p-&gt;next;\n    if(Q.rear==p)\n       Q.rear=Q.front;//若原队列中只有一个结点，删除后变空\n    free(p);\n    return true;\n &#125;\n</code></pre>\n<h3 id=\"3链队列示例代码\"><a class=\"markdownIt-Anchor\" href=\"#3链队列示例代码\">#</a> 3. 链队列示例代码</h3>\n<p>链队列的操作：链队列的初始化、入链队列、链队列队头元素出链队列以及显示链队列所有数据元素的示例代码如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> QElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tQElemType data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">QNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;QNode,*QueuePtr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tQueuePtr rear;</span><br><span class=\"line\">\tQueuePtr front;</span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ.front=Q.rear=(QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!Q.front)</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tQ.front-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue &amp;Q,QElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQueuePtr p;</span><br><span class=\"line\">\tp=(QueuePtr)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(QNode));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!p)</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tp-&gt;data=e;</span><br><span class=\"line\">\tp-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tQ.rear-&gt;next=p;</span><br><span class=\"line\">\tQ.rear=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">displayQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQueuePtr rear,front;</span><br><span class=\"line\">\tfront=Q.front-&gt;next;</span><br><span class=\"line\">\trear=Q.rear;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(front==rear)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;链队列为空!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(front!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,front-&gt;data);</span><br><span class=\"line\">\t\tfront=front-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">distoryQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(Q.front!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQ.rear=Q.front-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(Q.front);</span><br><span class=\"line\">\t\tQ.front=Q.rear;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue &amp;Q,QElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQueuePtr p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.front==Q.rear)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\tp=Q.front-&gt;next;</span><br><span class=\"line\">\te=p-&gt;data;</span><br><span class=\"line\">\tQ.front-&gt;next=p-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Q.rear==p)</span><br><span class=\"line\">\t\tQ.rear=Q.front;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLinkQueue Q;</span><br><span class=\"line\">\tInitQueue(Q);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;链队列中输入三个数据:\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;10\\t20\\t30&quot;</span>);</span><br><span class=\"line\">\tEnQueue(Q,<span class=\"number\">10</span>);</span><br><span class=\"line\">\tEnQueue(Q,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tEnQueue(Q,<span class=\"number\">30</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输出链队列中的三个数据:\\n&quot;</span>);</span><br><span class=\"line\">\tdisplayQueue(Q);</span><br><span class=\"line\">\t<span class=\"type\">int</span> e;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;链队列对头元素出队:&quot;</span>);</span><br><span class=\"line\">\tDeQueue(Q,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队的元素为:e=%d\\n\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;初始化链队列:\\n\\n&quot;</span>);</span><br><span class=\"line\">\tdistoryQueue(Q);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231747688.png\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "栈和队列"
            ]
        },
        {
            "id": "https://chulianyuang.github.io/2023/04/23/%E6%A0%88/",
            "url": "https://chulianyuang.github.io/2023/04/23/%E6%A0%88/",
            "title": "栈",
            "date_published": "2023-04-23T09:14:32.000Z",
            "content_html": "<h1 id=\"关于栈的那些事\"><a class=\"markdownIt-Anchor\" href=\"#关于栈的那些事\">#</a> 关于栈的那些事</h1>\n<h2 id=\"11-栈的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#11-栈的基本概念\">#</a> 1.1 栈的基本概念</h2>\n<p>栈：栈是只允许在一端进行插入或删除操作的线性表。栈是一种线性表，但限定了这种线性表只能在某一端进行插入和删除操作。</p>\n<ul>\n<li>栈顶（top）：线性表允许进行插入删除的那一端</li>\n<li>栈底（bottom）：固定的，不允许进行插入和删除的那一端</li>\n<li>空栈：不含任何元素的空表</li>\n</ul>\n<p>栈的特性：后进先出或先进后出。<br>\n栈的应用：进制转换、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQTElQTglRTglQkUlQkUlRTUlQkMlOEYlRTYlQjElODIlRTUlODAlQkMmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">表达式求值</span>、括号匹配等。</p>\n<h4 id=\"12-栈的顺序存储结构\"><a class=\"markdownIt-Anchor\" href=\"#12-栈的顺序存储结构\">#</a> 1.2 栈的顺序存储结构</h4>\n<h5 id=\"1-顺序栈的实现\"><a class=\"markdownIt-Anchor\" href=\"#1-顺序栈的实现\">#</a> 1. 顺序栈的实现</h5>\n<p>采用顺序存储结构的栈称为顺序栈，利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针（top）指示当前栈顶元素的位置。</p>\n<p>栈的顺序存储结构类型描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50  <span class=\"comment\">//定义栈中元素的最大个数</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">   ElemType data[MaxSize];  <span class=\"comment\">//存放栈中元素</span></span><br><span class=\"line\">   <span class=\"type\">int</span> top;  <span class=\"comment\">//栈顶指针</span></span><br><span class=\"line\">   &#125;SqStack;  </span><br><span class=\"line\"><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>栈顶指针：S.top，初始时设置：S.top = -1，栈顶元素：S.data [S.top]<br>\n 进栈操作：栈不满时，栈顶指针先加 1，再送值到栈顶元素。<br>\n出栈操作：栈非空时，先去栈顶元素值，再将栈顶指针减 1。<br>\n栈空条件：S.top == -1，栈满条件：S.top == MaxSize-1，栈长：S.top + 1</p>\n<blockquote>\n<p>注意：顺序栈的入栈操作受数组上界的约束，当对栈的最大使用空间估计不足时，有可能会出现栈上溢出。栈和队列的判空、判断条件，根据实际给的条件不同而变化。</p>\n</blockquote>\n<h5 id=\"2-顺序栈的基本运算\"><a class=\"markdownIt-Anchor\" href=\"#2-顺序栈的基本运算\">#</a> 2. 顺序栈的基本运算</h5>\n<p>栈顶指针和栈中元素之间的关系如下图所示：<br>\n<img data-src=\"https://cdn.jsdelivr.net/gh/chulianyuang/imap/202305231727786.jpg\" alt=\"0156ba11238cf6aedc3a1d7751241d1\" style=\"zoom: 67%;\" /><br>\n顺序栈常用的基本运算的代码实现如下所示：<br>\n(1) 初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span>&#123;</span><br><span class=\"line\">         S.top = <span class=\"number\">-1</span>;  <span class=\"comment\">//初始化栈顶指针</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>（2）判栈空</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">bool</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack S)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == <span class=\"number\">-1</span>)  <span class=\"comment\">//栈空</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">//栈非空</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>（3）进栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">bool</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;S,ElemType x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == MaxSize<span class=\"number\">-1</span>) <span class=\"comment\">//栈满，报错</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        S.data[++S.top] = x;  <span class=\"comment\">//指针先加1，再入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>（4）出栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"type\">bool</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;S,ElemType &amp;x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == <span class=\"number\">-1</span>) <span class=\"comment\">//栈空，报错</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        x = S.data[S.top--];  <span class=\"comment\">//先出栈，指针再减1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>（5）读栈顶元素</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"type\">bool</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S,ElemType x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S.top == <span class=\"number\">-1</span>) <span class=\"comment\">//栈空，报错</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">         x = S.data[S.top];  <span class=\"comment\">// x 记录栈顶元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>仅为读取栈顶元素，并没有出栈操作，原栈顶元素依然保留在栈中。</p>\n<blockquote>\n<p>注意：栈顶指针初始化为 S.top = -1，top 指向的是栈顶元素，进栈操作为 S.data [<ins>S.top] = x，出栈操作为 x = S.data [S.top-- ]。若栈顶指针初始化为 S.top = 0，即 top 指向栈顶元素的下一个位置，则入栈操作变为 S.data [S.top</ins>] = x，出栈操作变为 x = S.data [- -S.top]。相应的栈空、栈满条件也会发生变化。</p>\n</blockquote>\n<h5 id=\"4-顺序栈示例代码\"><a class=\"markdownIt-Anchor\" href=\"#4-顺序栈示例代码\">#</a> 4. 顺序栈示例代码</h5>\n<p>1、顺序栈的基本操作：顺序栈的初始化及其栈的入栈、出栈、查看栈中所有元素的示例代码如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INFEASIBLE -1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OVERFLOW -2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACK_INIT_SIZE 100  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> STACKINCREMENT 10    </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> SElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    SElemType *base; </span><br><span class=\"line\">    SElemType *top;  </span><br><span class=\"line\">    <span class=\"type\">int</span> stacksize;  </span><br><span class=\"line\">&#125;SqStack;</span><br><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    S.base = (SElemType *)<span class=\"built_in\">malloc</span>(STACK_INIT_SIZE*<span class=\"keyword\">sizeof</span>(SElemType));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base)</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(OVERFLOW); </span><br><span class=\"line\">    S.top = S.base;</span><br><span class=\"line\">    S.stacksize = STACK_INIT_SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">DestroyStack</span><span class=\"params\">(SqStack &amp;S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S.base)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;不存在该栈\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(S.base);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack S,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    e = *(S.top - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">Push</span><span class=\"params\">(SqStack &amp;S,SElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top - S.base &gt;= S.stacksize)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        S.base = (SElemType*)<span class=\"built_in\">realloc</span>(S.base,(S.stacksize + STACKINCREMENT)*<span class=\"keyword\">sizeof</span>(SElemType));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S.base) </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(OVERFLOW);</span><br><span class=\"line\">        S.top = S.base + S.stacksize;</span><br><span class=\"line\">        S.stacksize += STACKINCREMENT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *S.top++ = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack &amp;S,SElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base) <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    e = * --S.top;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Status <span class=\"title function_\">displayStack</span><span class=\"params\">(SqStack S)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S.top == S.base)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;该栈为空\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;S.top != S.base;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,*(--S.top));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    <span class=\"type\">int</span> e;</span><br><span class=\"line\">    InitStack(S);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;数据入栈:\\n&quot;</span>);</span><br><span class=\"line\">    Push(S,<span class=\"number\">10</span>);</span><br><span class=\"line\">    Push(S,<span class=\"number\">20</span>);</span><br><span class=\"line\">    Push(S,<span class=\"number\">30</span>);</span><br><span class=\"line\">\tdisplayStack(S);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;显示栈中的数据:\\n&quot;</span>);</span><br><span class=\"line\">    displayStack(S);</span><br><span class=\"line\">    GetTop(S,e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶的元素是:\\n%d\\n&quot;</span>,e);</span><br><span class=\"line\">    Pop(S,e);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素出栈:\\n%d\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;显示栈中的数据:\\n&quot;</span>);</span><br><span class=\"line\">    displayStack(S);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210502084535554.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n 2、顺序栈的应用：实现两个多项式的相加运算。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span>   </span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PolynNode</span>&#123;</span>  </span><br><span class=\"line\">    <span class=\"type\">int</span> coef; </span><br><span class=\"line\">    <span class=\"type\">int</span> expn; </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PolynNode</span> *<span class=\"title\">next</span>;</span>  </span><br><span class=\"line\">&#125;PolynNode,*PolynList;  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">CreatePolyn</span><span class=\"params\">(PolynList &amp;L,<span class=\"type\">int</span> n)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> i;  </span><br><span class=\"line\">    PolynList p,q;  </span><br><span class=\"line\">    L=(PolynList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(PolynNode));</span><br><span class=\"line\">    L-&gt;next=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">    q=L;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;成对输入%d个数据\\n&quot;</span>,n);  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        p=(PolynList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(PolynNode));  </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;p-&gt;coef,&amp;p-&gt;expn);   </span><br><span class=\"line\">        q-&gt;next=p;  </span><br><span class=\"line\">        q=q-&gt;next;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    p-&gt;next=<span class=\"literal\">NULL</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PolynTraverse</span><span class=\"params\">(PolynList L,<span class=\"type\">void</span>(*vi)(ElemType, ElemType))</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    PolynList p=L-&gt;next;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        vi(p-&gt;coef, p-&gt;expn);  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;next)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; + &quot;</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        p=p-&gt;next;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(ElemType c, ElemType e)</span>   </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c != <span class=\"number\">0</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%dX^%d&quot;</span>,c,e);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">PolynList <span class=\"title function_\">MergeList</span><span class=\"params\">(PolynList La, PolynList Lb)</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    PolynList pa, pb, pc, Lc;  </span><br><span class=\"line\">    pa = La-&gt;next;  </span><br><span class=\"line\">    pb = Lb-&gt;next;  </span><br><span class=\"line\">    Lc = pc = La;   </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pa&amp;&amp;pb)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pa-&gt;expn &lt; pb-&gt;expn)          </span><br><span class=\"line\">        &#123;                                </span><br><span class=\"line\">            pc-&gt;next = pa;             </span><br><span class=\"line\">            pc = pa;  </span><br><span class=\"line\">            pa = pa-&gt;next;             </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pa -&gt;expn &gt; pb-&gt;expn )      </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            pc-&gt;next = pb;                </span><br><span class=\"line\">            pc = pb;  </span><br><span class=\"line\">            pb = pb-&gt;next;               </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            pa-&gt;coef = pa-&gt;coef + pb-&gt;coef;      </span><br><span class=\"line\">            pc-&gt;next = pa;  </span><br><span class=\"line\">            pc = pa;  </span><br><span class=\"line\">            pa = pa-&gt;next;             </span><br><span class=\"line\">            pb = pb-&gt;next;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    pc-&gt;next = pa ? pa:pb;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Lc;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    PolynList ha,hb,hc;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;非递减输入多项式A， &quot;</span>);  </span><br><span class=\"line\">    CreatePolyn(ha,<span class=\"number\">5</span>);   </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;非递减输入多项式B， &quot;</span>);  </span><br><span class=\"line\">    CreatePolyn(hb,<span class=\"number\">5</span>);    </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;多项式A :&quot;</span>);  </span><br><span class=\"line\">    PolynTraverse(ha, visit);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;多项式B :&quot;</span>);  </span><br><span class=\"line\">    PolynTraverse(hb, visit);  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);  </span><br><span class=\"line\">   </span><br><span class=\"line\">    hc = MergeList(ha,hb);  </span><br><span class=\"line\">    PolynTraverse(hc, visit);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210502090607831.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"13-栈的链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#13-栈的链式存储结构\">#</a> 1.3 栈的链式存储结构</h4>\n<p>采用链式存储结构的栈称为链栈，链栈的优点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况。通常采用单链表实现，并规定所有操作都在单链表的表头进行。规定链栈没有头结点，LHead 指向栈顶元素，栈的链式存储结构如下图所示：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210502085037626.png#pic_center\" alt=\"在这里插入图片描述\"><br>\n栈的链式存储结构类型描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span>&#123;</span></span><br><span class=\"line\">   ElemType data;  <span class=\"comment\">//数据域</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span> *<span class=\"title\">next</span>;</span>  <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;*LiStack;  <span class=\"comment\">//栈定义类型</span></span><br></pre></td></tr></table></figure>\n<p>采用链式存储，便于结点的插入和删除。链栈的操作和链表类似，入栈和出栈的操作都在链表的表头进行。对于带头结点和不带头结点的连载，具体的实现会有所不同。</p>\n<p>示例代码：链栈的初始化、入链栈、获取链栈顶元素以及输出链栈所有元素的代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OK 1;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ERROR 0;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TRUE 1;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FALSE 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> Status;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;*LiStack;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">InitStack</span><span class=\"params\">(LiStack &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tL=(<span class=\"keyword\">struct</span> LinkNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">\tL-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">InputStack</span><span class=\"params\">(LiStack &amp;L,ElemType e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p;</span><br><span class=\"line\">\tp=(<span class=\"keyword\">struct</span> LinkNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">\tp-&gt;data=e;</span><br><span class=\"line\">\tp-&gt;next=L-&gt;next;</span><br><span class=\"line\">\tL-&gt;next=p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">PrintStack</span><span class=\"params\">(LiStack &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p=L-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>,p-&gt;data);</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">DestoryStack</span><span class=\"params\">(LiStack &amp;L)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p;</span><br><span class=\"line\">\tp=L-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Status <span class=\"title function_\">GetTop</span><span class=\"params\">(LiStack &amp;L,ElemType &amp;e)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack p=L-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">\te=p-&gt;data;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tLiStack L;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1,e2,e3;</span><br><span class=\"line\">\tInitStack(L);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;输入三个数据进入链栈&quot;</span>);</span><br><span class=\"line\">\tInputStack(L,<span class=\"number\">10</span>);</span><br><span class=\"line\">\tInputStack(L,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tInputStack(L,<span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n链栈中的数据为:\\n&quot;</span>);</span><br><span class=\"line\">\tPrintStack(L);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;获取栈顶数据:\\n&quot;</span>);</span><br><span class=\"line\">\tGetTop(L,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶数据为e=%d\\n&quot;</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n输出链栈中全部数据:\\n&quot;</span>);</span><br><span class=\"line\">\tPrintStack(L);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n初始化链栈:\\n&quot;</span>);</span><br><span class=\"line\">\tDestoryStack(L);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下图所示：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/2021050208571272.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "栈和队列"
            ]
        }
    ]
}