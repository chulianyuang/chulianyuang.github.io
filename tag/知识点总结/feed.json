{
    "version": "https://jsonfeed.org/version/1",
    "title": "welcome to my world • All posts by \"知识点总结\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/03/09/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "url": "http://example.com/2023/03/09/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89/",
            "title": "线性表的类型定义",
            "date_published": "2023-03-09T11:54:04.000Z",
            "content_html": "<h1 id=\"线性表的类型定义\"><a class=\"markdownIt-Anchor\" href=\"#线性表的类型定义\">#</a> 线性表的类型定义</h1>\n<p>[TOC]</p>\n<blockquote>\n<p>数据结构三要素 —<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTklODAlQkIlRTglQkUlOTElRTclQkIlOTMlRTYlOUUlODQmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\"> 逻辑结构</span>、数据的运算、存储结构 (物理结构)【存储结构不同，运算的实现方式就不同】</p>\n</blockquote>\n<h1 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h1>\n<p>线性表是具有相同数据类型的 n (n≥0) 个数据元素的有限序列，其中 n 为表长，当 n=0 时线<br>\n性表是一个空表。若用命名线性表，则其一般表示为</p>\n<p>L = ( a 1 , a 2 , … , a i … , a n L=(a_1,a_2,…,a_i…,a_nL=(a1,a2,…,ai…,an</p>\n<ol>\n<li>a i a_iai 是线性表中的 “第 i 个” 元素线性表中的位序</li>\n<li>a 1 a_1a1 是表头元素；a n a_nan 是表尾元素</li>\n<li>除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且只有一个直接后继。</li>\n</ol>\n<p><img data-src=\"https://img-blog.csdnimg.cn/826f9cb758e2452281777a889debcf62.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\">#</a> 基本操作</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitList(&amp;L)：初始化表。构造一个空的线性表L，分配内存空间。</span><br><span class=\"line\"></span><br><span class=\"line\">DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</span><br><span class=\"line\"></span><br><span class=\"line\">ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</span><br><span class=\"line\"></span><br><span class=\"line\">ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</span><br><span class=\"line\"></span><br><span class=\"line\">LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。</span><br><span class=\"line\"></span><br><span class=\"line\">GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</span><br><span class=\"line\"></span><br><span class=\"line\">其他常用操作：</span><br><span class=\"line\"></span><br><span class=\"line\">Length(L) 求表长。返回线性表L的长度，即L中数据元素的个数。</span><br><span class=\"line\"></span><br><span class=\"line\">PrintList(L) 输出操作。按前后顺序输出线性表L的所有元素值。</span><br><span class=\"line\"></span><br><span class=\"line\">Empty(L) 判空操作。若L为空表，则返回<span class=\"literal\">true</span>，否则返回<span class=\"literal\">false</span>。</span><br></pre></td></tr></table></figure>\n<p><strong>值得注意的是：</strong></p>\n<ol>\n<li><strong>抽象数据类型仅是一个模型的定义，并不涉及模型的具体实现，因此这里描述中所涉及的参数不必考虑具体数据类型。在实际应用中，数据元素可能有多种类型，我们要随机应变。</strong></li>\n<li><strong>上述抽象数据类型中给出的操作只是基本操作，由这些基本操作可以构成其它较复杂的操作。</strong></li>\n<li><strong>对于不同的应用，基本操作的接口可能不同。</strong></li>\n<li><strong>由抽象数据类型定义的线性表，可以根据实际所采用的存储结构形式，进行具体的表示与实现。</strong></li>\n</ol>\n<p><img data-src=\"https://img-blog.csdnimg.cn/4c48d1a1f52d4f268a1e1112beacda96.png\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @author five-five</span></span><br><span class=\"line\"><span class=\"comment\"> * @created 2022/5/2</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INIT_SIZE 10 <span class=\"comment\">//初试长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;<span class=\"comment\">//顺序表的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *data;<span class=\"comment\">//顺序表的内容</span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxsize;<span class=\"comment\">//顺序表的最大长度</span></span><br><span class=\"line\">&#125; SeqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 1:success?fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">initList</span><span class=\"params\">(SeqList *l)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用malloc函数申请一片连续的存储空间</span></span><br><span class=\"line\">    <span class=\"comment\">//重点掌握为什么需要强转malloc()类型为int*类型</span></span><br><span class=\"line\">    <span class=\"comment\">//指针在移动是会根据sizeof(type)去进行移动，如果你不指定指针的类型，那么在指针移动检索的操作时，指针只会一个一个字节的去移动</span></span><br><span class=\"line\">    l-&gt;data = (<span class=\"type\">int</span> *) <span class=\"built_in\">malloc</span>(INIT_SIZE * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    l-&gt;length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    l-&gt;maxsize = INIT_SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len 长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 1:success?fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">increaseSize</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *pInt = l-&gt;data;</span><br><span class=\"line\">    l-&gt;data = (<span class=\"type\">int</span> *) <span class=\"built_in\">malloc</span>(l-&gt;maxsize + len * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"comment\">//复制</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l-&gt;length; ++i) &#123;</span><br><span class=\"line\">        l-&gt;data[i] = pInt[i];<span class=\"comment\">//将数据复制到新区域</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;maxsize = l-&gt;maxsize + len;<span class=\"comment\">//顺序表的最大长度增加len</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(pInt);<span class=\"comment\">//释放空间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e 插入元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">listInsert</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> i, <span class=\"type\">int</span> e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = l-&gt;length; j &gt;= i; --j) &#123;</span><br><span class=\"line\">        l-&gt;data[j] = l-&gt;data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;data[i] = e;</span><br><span class=\"line\">    l-&gt;length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e int 指针，用于接收删除值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">listDelete</span><span class=\"params\">(SeqList *l, <span class=\"type\">int</span> i, <span class=\"type\">int</span> *e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; l-&gt;length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *e = l-&gt;data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; l-&gt;length; j++) &#123;</span><br><span class=\"line\">        l-&gt;data[j - <span class=\"number\">1</span>] = l-&gt;data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l-&gt;length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 取出下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param i 要去除元素下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 下标对应的元素</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getElem</span><span class=\"params\">(SeqList l, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l.data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 按值查找，并返回下标</span></span><br><span class=\"line\"><span class=\"comment\"> * @param l 线性表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param e 要查找元素值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return -1表示没有找到</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">locateElem</span><span class=\"params\">(SeqList l, <span class=\"type\">int</span> e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; l.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e == l.data[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    SeqList seqList;</span><br><span class=\"line\">    initList(&amp;seqList);</span><br><span class=\"line\">    increaseSize(&amp;seqList, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%l&quot;</span>, <span class=\"keyword\">sizeof</span>(seqList));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "知识点总结"
            ]
        },
        {
            "id": "http://example.com/2023/03/07/%E7%BB%AA%E8%AE%BA/",
            "url": "http://example.com/2023/03/07/%E7%BB%AA%E8%AE%BA/",
            "title": "绪论",
            "date_published": "2023-03-07T09:15:42.000Z",
            "content_html": "<h1 id=\"绪论\"><a class=\"markdownIt-Anchor\" href=\"#绪论\">#</a> 绪论</h1>\n<h2 id=\"树状图总结\"><a class=\"markdownIt-Anchor\" href=\"#树状图总结\">#</a> 树状图总结</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\"> </span><br><span class=\"line\">A[绪论] --&gt;B(数据结构)--&gt;C(逻辑结构)--&gt;a(线性结构)--&gt;d&#123;线性表&#125;</span><br><span class=\"line\">a--&gt;q&#123;栈和队列&#125; </span><br><span class=\"line\">a--&gt;w&#123;字符串&#125;</span><br><span class=\"line\">C--&gt;b(非线性结构)--&gt;e&#123;树状图&#125;</span><br><span class=\"line\">b--&gt;r&#123;图结构&#125;</span><br><span class=\"line\">B--&gt;D(存储结构)--&gt;t&#123;顺序存储结构&#125;</span><br><span class=\"line\">D--&gt;y&#123;链式存储结构&#125;</span><br><span class=\"line\">A[绪论] --&gt;c(算法)--&gt;u(定义)</span><br><span class=\"line\">  c--&gt;o(特性)</span><br><span class=\"line\">  c--&gt;p(评价标准)</span><br><span class=\"line\">  c--&gt;s(效率度量)--&gt;f&#123;时间复杂度&#125;</span><br><span class=\"line\">  s--&gt;g&#123;空间复杂度&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<h2 id=\"在这一章中主要介绍了数据结构的基本概念和术语以及算法和算法时间复杂度的分析方法\"><a class=\"markdownIt-Anchor\" href=\"#在这一章中主要介绍了数据结构的基本概念和术语以及算法和算法时间复杂度的分析方法\">#</a> 在这一章中主要介绍了数据结构的基本概念和术语，以及算法和算法时间复杂度的分析方法。</h2>\n<ul>\n<li>\n<p>数据结构是一门研究非数值计算程序设计中操作对象，以及这些对象之间的关系和操作对象，以及这些对象之间的关系和操作的学科。</p>\n</li>\n<li>\n<p>数据结构包括两个方面的内容：数据的逻辑结构和存储结构。同一逻辑结构采用不同的储存方法，可以得到不同的存储结构</p>\n<ol>\n<li>逻辑结构是从具体问题抽象出来的数学模型，从逻辑关系上描述数据，它与数据的存储无关。根据数据元素之间关系的不同特性，通常有四类基本逻辑结构：集合结构，线性结构，树形结构和图状结构。</li>\n<li>存储结构是逻辑结构在计算机中的存储表示，有两类存储结构：顺序粗出结构和链式存储结构。</li>\n</ol>\n</li>\n<li>\n<p>抽象数据类型是指由用户定义的，表示应用问题的数学模型，以及定义在这个模型上的一组操作的总称，具体包括三部分：数据对象，数据对象上关系的集合，以及对数据对象的基本操作的集合。</p>\n</li>\n<li>\n<p>算法是为了解决某类问题而规定的一个有限长的操作数列。算法具有四个特性：正确性，可读性，健壮性和高效性。</p>\n</li>\n<li>\n<p>算法分析的两个主要方面是分析算法的时间发杂度和空间复杂度，以考察算法的时间和空间效率。一般情况下，鉴于运算空间较为充足，故将算法的时间复杂度作为分析的重点。算法执行时间的数量级称为算法的渐近时间复杂度，T (n)=O (f (n))，它表示随着问题 n 的增大，算法执行时间的增长率和 f (n) 的增长率相同，简称时间复杂度。</p>\n</li>\n</ul>\n<h3 id=\"这一章的知识点并不多我着重讲一下时间复杂度的相关知识\"><a class=\"markdownIt-Anchor\" href=\"#这一章的知识点并不多我着重讲一下时间复杂度的相关知识\">#</a> 这一章的知识点并不多，我着重讲一下时间复杂度的相关知识</h3>\n<p>在描述算法复杂度时，经常用到 O (1) , O ( n ) , O ( l o g n ) , O ( n l o g n ) 来表示对应复杂度程度，不过目前大家默认也通过这几个方式表示<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclQTklQkElRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">空间复杂度</span> 。</p>\n<p>那么，O (1) , O ( n ) , O ( l o g n ) , O ( n l o g n ) 就可以看作既可表示算法复杂度，也可以表示空间复杂度。</p>\n<p>大 O 加上（）的形式，里面其实包裹的是一个函数 f () , O （ f () ） f (),O（f ()）f (),O（f ()）, 指明某个算法的耗时 / 耗空间与数据增长量之间的关系。其中的 n  代表输入数据的量。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200415110541459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5Nzc3NA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>如果 ax=N（a&gt;0，且 a≠1），那么数 x 叫做以 a 为底 N 的对数，记作 x=logaN，读作以 a 为底 N 的对数，其中 a 叫做对数的底数，N 叫做真数。</p>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200415110548576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY5Nzc3NA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>\n比如线段树复杂度 O (l o g n + n) ，查询修改都是 O ( l o g n ) <strong>刚学的时候简直惊为天人</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=i;++j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">1</span>;k&lt;=j;++k)</span><br><span class=\"line\">                x=x+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"number\">1234</span></span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">时间复杂度</span>是 O (n^3)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)</span><br><span class=\"line\">        i*=<span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">1234</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度 O (l o g 2 n)−&gt;O ( l o g n )<br>\n 评测机一般能过 10<sup>8~10</sup>9 ，根据评测机的性能以及程序的常数而定</p>\n",
            "tags": [
                "知识点总结"
            ]
        }
    ]
}